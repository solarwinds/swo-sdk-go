name: E2E Tests
on:
  pull_request:
    branches:
      - main
    paths:
      - swov1/**
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    container:
      image: golang:1.23-alpine
    env:
      SWO_STAGE_API_TOKEN: ${{ secrets.SWO_STAGE_API_TOKEN }}
      PUBLIC_SWO_API_STAGE_URL: ${{ vars.PUBLIC_SWO_API_STAGE_URL }}
      SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Python
        run: |
          apk add --no-cache python3 py3-pip
          python3 -m venv venv
          . venv/bin/activate
          pip install pyyaml
      - name: Replace query time placeholders in YAML
        run: |
          . venv/bin/activate
          python3 replace_env_in_yaml.py swov1/.speakeasy/tests.arazzo.yaml
      - name: Install Speakeasy CLI
        run: |
          wget -q https://github.com/speakeasy-api/speakeasy/releases/download/v1.631.4/speakeasy_linux_amd64.zip
          unzip -o speakeasy_linux_amd64.zip -d /usr/local/bin
          chmod +x /usr/local/bin/speakeasy
      - name: Install curl
        run: apk add --no-cache curl
      - name: Run Speakeasy codegen
        env:
          SPEAKEASY_API_KEY: ${{ secrets.SPEAKEASY_API_KEY }}
        run: |
          speakeasy run --minimal
      - name: Install Bash
        run: apk add --no-cache bash
      - name: Run E2E tests and notify Slack (scheduled)
        shell: bash
        run: |
          cd swov1
          TEST_OUTPUT=$(go test -v ./tests 2>&1)

          declare -A TEST_STATUS
          while read -r line; do
            if [[ $line =~ ^===\ RUN ]]; then
              test=${line##* }
              TEST_STATUS["$test"]="RUN"
            elif [[ $line =~ ^---\ PASS:\ (.*) ]]; then
              test=${BASH_REMATCH[1]}
              TEST_STATUS["$test"]="PASSED"
            elif [[ $line =~ ^---\ FAIL:\ (.*) ]]; then
              test=${BASH_REMATCH[1]}
              TEST_STATUS["$test"]="PASSED"
            elif [[ $line =~ ^---\ FAIL:\ (.*) ]]; then
              test=${BASH_REMATCH[1]}
              TEST_STATUS["$test"]="FAILED"
            fi
          done <<< "$TEST_OUTPUT"

          TEST_SUMMARY=$(echo "$TEST_OUTPUT" | awk '
            /^=== RUN/ { test=$3 }
            /^--- PASS:/ { print "- " test " :white_check_mark: PASSED" }
            /^--- FAIL:/ { print "- " test " :x: FAILED" }
          ')

          ERRORS=""
          while read -r line; do
            if [[ $line =~ ^([a-zA-Z0-9_]+)_e2e_test\.go:[0-9]+: ]]; then
              test=$(echo "$line" | awk -F: '{print $1}' | awk -F'/' '{print $NF}' | awk -F'_' '{print "TestSDK_"$2}')
              status=${TEST_STATUS["$test"]}
              ERRORS+="\nâ€¢ $test ($status):\n\`\`\`\n$line\n\`\`\`"
            fi
          done <<< "$(echo "$TEST_OUTPUT" | grep 'error')"

          TEST_EXIT_CODE=$?
          if [ $TEST_EXIT_CODE -eq 0 ]; then
            STATUS="PASSED"
          else
            STATUS="FAILED"
          fi
          PAYLOAD=$(cat <<EOF
          {
            "text": "*Nightly E2E Tests: $STATUS*\nSee details: https://github.com/solarwinds/swo-sdk-go/actions/runs/18170151433\n\n$TEST_SUMMARY\n$ERRORS"
          }
          EOF
          )
          curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" $SLACK_WEBHOOK_URL