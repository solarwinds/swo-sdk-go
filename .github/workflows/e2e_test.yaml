name: E2E Tests
on:
  pull_request:
    branches:
      - main
    paths:
      - swov1/**
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    container:
      image: golang:1.23-alpine
    env:
      SWO_STAGE_API_TOKEN: ${{ secrets.SWO_STAGE_API_TOKEN }}
      PUBLIC_SWO_API_STAGE_URL: ${{ vars.PUBLIC_SWO_API_STAGE_URL }}
      SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Python
        run: |
          apk add --no-cache python3 py3-pip
          python3 -m venv venv
          . venv/bin/activate
          pip install pyyaml
      - name: Replace query time placeholders in YAML
        run: |
          . venv/bin/activate
          python3 replace_env_in_yaml.py swov1/.speakeasy/tests.arazzo.yaml
      - name: Install Speakeasy CLI
        run: |
          wget -q https://github.com/speakeasy-api/speakeasy/releases/download/v1.631.4/speakeasy_linux_amd64.zip
          unzip -o speakeasy_linux_amd64.zip -d /usr/local/bin
          chmod +x /usr/local/bin/speakeasy
      - name: Install curl
        run: apk add --no-cache curl
      - name: Run Speakeasy codegen
        env:
          SPEAKEASY_API_KEY: ${{ secrets.SPEAKEASY_API_KEY }}
        run: |
          speakeasy run --minimal
      - name: Install Bash
        run: apk add --no-cache bash
      - name: Run E2E tests and notify Slack (scheduled)
        shell: bash
        run: |
          cd swov1
          START_TIME=$(date +%s)

          TEST_OUTPUT=$(go test -v ./tests 2>&1)
          TEST_EXIT_CODE=$?

          END_TIME=$(date +%s)
          DURATION_SEC=$((END_TIME - START_TIME))
          DURATION_FMT=$(printf '%dm %02ds' $((DURATION_SEC/60)) $((DURATION_SEC%60)))

          declare -A TEST_STATUS
          declare -A TEST_ERRORS
          declare -a TEST_ORDER

          CURRENT_TEST=""
          while IFS= read -r line; do
            if [[ $line =~ ^===\ RUN[[:space:]]+(.+) ]]; then
              CURRENT_TEST="${BASH_REMATCH[1]}"
              TEST_STATUS["$CURRENT_TEST"]="RUN"
              TEST_ORDER+=("$CURRENT_TEST")
            elif [[ $line =~ ^---\ PASS:\ (.+) ]]; then
              TEST_STATUS["${BASH_REMATCH[1]}"]="PASSED"
            elif [[ $line =~ ^---\ FAIL:\ (.+) ]]; then
              TEST_STATUS["${BASH_REMATCH[1]}"]="FAILED"
            fi
          done <<< "$TEST_OUTPUT"

          # Gather errors under each test
          while IFS= read -r line; do
            if [[ $line =~ ^([a-zA-Z0-9_]+)_e2e_test\.go:[0-9]+: ]]; then
              FILE_LINE=${line%%:*}
              TEST_NAME=$(echo "$FILE_LINE" | awk -F_ '{print "TestSDK_"$2}')
              TEST_ERRORS["$TEST_NAME"]+="$line"$'\n'
            fi
          done <<< "$(echo "$TEST_OUTPUT" | grep 'error')"

          # Build summary: each test and its errors (if any)
          TEST_SUMMARY=""
          for test in "${TEST_ORDER[@]}"; do
            STATUS="${TEST_STATUS[$test]}"
            if [[ "$STATUS" == "PASSED" ]]; then
              EMOJI=":white_check_mark:"
            elif [[ "$STATUS" == "FAILED" ]]; then
              EMOJI=":x:"
            else
              EMOJI=":grey_question:"
            fi
            TEST_SUMMARY+="â€¢ *$test* $EMOJI"
            if [[ -n "${TEST_ERRORS[$test]}" ]]; then
              TEST_SUMMARY+="\n> \`\`\`\n${TEST_ERRORS[$test]}\`\`\`"
            fi
            TEST_SUMMARY+="\n"
          done

          if [ $TEST_EXIT_CODE -eq 0 ]; then
            OVERALL_STATUS="*PASSED*"
          else
            OVERALL_STATUS="*FAILED*"
          fi

          # Compose Slack message as block quote
          PAYLOAD=$(cat <<EOF
          > *Nightly SWO SDK GO Tests:* $OVERALL_STATUS
          > *Duration:* $DURATION_FMT
          > *See details:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}>
          >
          > *Test Results:*
          $TEST_SUMMARY
          EOF
          )
          
          # Post to Slack (example for webhook)
          # Use jq to properly escape JSON for Slack
          apk add --no-cache jq
          curl -X POST -H 'Content-type: application/json' --data "$(jq -nc --arg text "$PAYLOAD" '{"text":$text}')" "$SLACK_WEBHOOK_URL"