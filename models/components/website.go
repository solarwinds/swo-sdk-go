// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// Rum -     Use this field to configure real user monitoring (RUM) for the website.
//
//	You are required to configure at least availability monitoring or real user monitoring to be able to create website.
type Rum struct {
	ApdexTimeInSeconds *int `json:"apdexTimeInSeconds,omitempty"`
	Spa                bool `json:"spa"`
}

func (o *Rum) GetApdexTimeInSeconds() *int {
	if o == nil {
		return nil
	}
	return o.ApdexTimeInSeconds
}

func (o *Rum) GetSpa() bool {
	if o == nil {
		return false
	}
	return o.Spa
}

type Website struct {
	// Name of the website, which must be unique within the organization. The website must also not contain any control characters, any white space other than space (U+0020), or any consecutive, leading or trailing spaces.
	Name string `json:"name"`
	// URL of the website. Must be a valid URL with no leading or trailing white space. Must not contain invalid port number (>65535).
	URL string `json:"url"`
	// Use this field to configure availability tests for the website.
	AvailabilityCheckSettings *AvailabilityCheckSettings `json:"availabilityCheckSettings,omitempty"`
	// Entity tags. Tag is a key-value pair, where there may be only single tag value for the same key.
	Tags []Tag `json:"tags,omitempty"`
	//     Use this field to configure real user monitoring (RUM) for the website.
	//     You are required to configure at least availability monitoring or real user monitoring to be able to create website.
	Rum *Rum `json:"rum,omitempty"`
}

func (o *Website) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Website) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *Website) GetAvailabilityCheckSettings() *AvailabilityCheckSettings {
	if o == nil {
		return nil
	}
	return o.AvailabilityCheckSettings
}

func (o *Website) GetTags() []Tag {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Website) GetRum() *Rum {
	if o == nil {
		return nil
	}
	return o.Rum
}
