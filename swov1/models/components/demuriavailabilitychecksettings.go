// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// DemURIAvailabilityCheckSettingsPlatformOptions - Configure cloud platforms of the synthetic availability test probes. If omitted or set to null, no particular cloud platform will be enforced.
type DemURIAvailabilityCheckSettingsPlatformOptions struct {
	// Cloud platforms hosting synthetic probes.
	ProbePlatforms []DemProbePlatform `json:"probePlatforms"`
	//   Use this field to configure whether availability tests should be performed from all selected
	//   platforms or one randomly selected platform. It has no effect if you provided only one platform
	//   in the `probePlatforms` field.
	//
	//   If set to true, a separate test is made from each of the selected platforms.
	//
	//   If set to false, only one of the selected platforms is chosen every time.
	//
	//   If omitted, the previous setting will stay in effect. If there is no previous setting, the value
	//   will default to false.
	TestFromAll *bool `json:"testFromAll,omitempty"`
}

func (o *DemURIAvailabilityCheckSettingsPlatformOptions) GetProbePlatforms() []DemProbePlatform {
	if o == nil {
		return []DemProbePlatform{}
	}
	return o.ProbePlatforms
}

func (o *DemURIAvailabilityCheckSettingsPlatformOptions) GetTestFromAll() *bool {
	if o == nil {
		return nil
	}
	return o.TestFromAll
}

// DemURIAvailabilityCheckSettingsFailingTestLocations - How many locations must report a failure for an entity to be considered down.
type DemURIAvailabilityCheckSettingsFailingTestLocations string

const (
	DemURIAvailabilityCheckSettingsFailingTestLocationsAll DemURIAvailabilityCheckSettingsFailingTestLocations = "all"
	DemURIAvailabilityCheckSettingsFailingTestLocationsAny DemURIAvailabilityCheckSettingsFailingTestLocations = "any"
)

func (e DemURIAvailabilityCheckSettingsFailingTestLocations) ToPointer() *DemURIAvailabilityCheckSettingsFailingTestLocations {
	return &e
}
func (e *DemURIAvailabilityCheckSettingsFailingTestLocations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "any":
		*e = DemURIAvailabilityCheckSettingsFailingTestLocations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DemURIAvailabilityCheckSettingsFailingTestLocations: %v", v)
	}
}

// DemURIAvailabilityCheckSettingsOutageConfiguration -   Default conditions when the entity is considered down.
//
//	If omitted or set to null, organization configuration will be used for this entity.
type DemURIAvailabilityCheckSettingsOutageConfiguration struct {
	// How many locations must report a failure for an entity to be considered down.
	FailingTestLocations DemURIAvailabilityCheckSettingsFailingTestLocations `json:"failingTestLocations"`
	// Number of consecutive failing tests for an entity to be considered down.
	ConsecutiveForDown int `json:"consecutiveForDown"`
}

func (o *DemURIAvailabilityCheckSettingsOutageConfiguration) GetFailingTestLocations() DemURIAvailabilityCheckSettingsFailingTestLocations {
	if o == nil {
		return DemURIAvailabilityCheckSettingsFailingTestLocations("")
	}
	return o.FailingTestLocations
}

func (o *DemURIAvailabilityCheckSettingsOutageConfiguration) GetConsecutiveForDown() int {
	if o == nil {
		return 0
	}
	return o.ConsecutiveForDown
}

// DemURIAvailabilityCheckSettingsPing -   Use this field to configure ping tests for the URI. If omitted or set to null, ping tests will be disabled.
//
//	One test type (ping or TCP) must be enabled for a URI.
type DemURIAvailabilityCheckSettingsPing struct {
	// Use this field to configure ping tests for the URI. If omitted or set to false, ping tests will be disabled.
	// One test type (ping or TCP) must be enabled for a URI.
	Enabled bool `json:"enabled"`
}

func (o *DemURIAvailabilityCheckSettingsPing) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

// DemURIAvailabilityCheckSettingsTCP -   Use this field to configure TCP tests for the URI. If omitted or set to null, TCP tests will be disabled.
//
//	One test type (ping or TCP) must be enabled for a URI.
type DemURIAvailabilityCheckSettingsTCP struct {
	// Use this field to configure TCP tests for the URI. If omitted or set to false, TCP tests will be disabled.
	// One test type (ping or TCP) must be enabled for a URI.
	Enabled bool `json:"enabled"`
	// Port number to be used in TCP tests.
	Port int `json:"port"`
	// Use this field to specify a string to send in the body of a TCP request.
	StringToSend *string `json:"stringToSend,omitempty"`
	// Use this field to specify a string to search for in the body of a TCP response.
	StringToExpect *string `json:"stringToExpect,omitempty"`
}

func (o *DemURIAvailabilityCheckSettingsTCP) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *DemURIAvailabilityCheckSettingsTCP) GetPort() int {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *DemURIAvailabilityCheckSettingsTCP) GetStringToSend() *string {
	if o == nil {
		return nil
	}
	return o.StringToSend
}

func (o *DemURIAvailabilityCheckSettingsTCP) GetStringToExpect() *string {
	if o == nil {
		return nil
	}
	return o.StringToExpect
}

// Protocol used to test availability of the URI.
type Protocol string

const (
	ProtocolPing Protocol = "PING"
	ProtocolTCP  Protocol = "TCP"
)

func (e Protocol) ToPointer() *Protocol {
	return &e
}
func (e *Protocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PING":
		fallthrough
	case "TCP":
		*e = Protocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Protocol: %v", v)
	}
}

type DemURIAvailabilityCheckSettings struct {
	// Configure cloud platforms of the synthetic availability test probes. If omitted or set to null, no particular cloud platform will be enforced.
	PlatformOptions *DemURIAvailabilityCheckSettingsPlatformOptions `json:"platformOptions,omitempty"`
	//   Configure locations of the synthetic availability test probes.
	//   Acceptable values depend on the selected type and actual values of existing probes.
	TestFrom DemTestFrom `json:"testFrom"`
	// Configure how often availability tests should be performed. Provide a number of seconds that is one of 60, 300, 600, 900, 1800, 3600, 7200, 14400.
	TestIntervalInSeconds float64 `json:"testIntervalInSeconds"`
	//   Default conditions when the entity is considered down.
	//   If omitted or set to null, organization configuration will be used for this entity.
	OutageConfiguration *DemURIAvailabilityCheckSettingsOutageConfiguration `json:"outageConfiguration,omitempty"`
	//   Use this field to configure ping tests for the URI. If omitted or set to null, ping tests will be disabled.
	//   One test type (ping or TCP) must be enabled for a URI.
	Ping *DemURIAvailabilityCheckSettingsPing `json:"ping,omitempty"`
	//   Use this field to configure TCP tests for the URI. If omitted or set to null, TCP tests will be disabled.
	//   One test type (ping or TCP) must be enabled for a URI.
	TCP *DemURIAvailabilityCheckSettingsTCP `json:"tcp,omitempty"`
	// Protocol used to test availability of the URI.
	Protocol Protocol `json:"protocol"`
}

func (o *DemURIAvailabilityCheckSettings) GetPlatformOptions() *DemURIAvailabilityCheckSettingsPlatformOptions {
	if o == nil {
		return nil
	}
	return o.PlatformOptions
}

func (o *DemURIAvailabilityCheckSettings) GetTestFrom() DemTestFrom {
	if o == nil {
		return DemTestFrom{}
	}
	return o.TestFrom
}

func (o *DemURIAvailabilityCheckSettings) GetTestIntervalInSeconds() float64 {
	if o == nil {
		return 0.0
	}
	return o.TestIntervalInSeconds
}

func (o *DemURIAvailabilityCheckSettings) GetOutageConfiguration() *DemURIAvailabilityCheckSettingsOutageConfiguration {
	if o == nil {
		return nil
	}
	return o.OutageConfiguration
}

func (o *DemURIAvailabilityCheckSettings) GetPing() *DemURIAvailabilityCheckSettingsPing {
	if o == nil {
		return nil
	}
	return o.Ping
}

func (o *DemURIAvailabilityCheckSettings) GetTCP() *DemURIAvailabilityCheckSettingsTCP {
	if o == nil {
		return nil
	}
	return o.TCP
}

func (o *DemURIAvailabilityCheckSettings) GetProtocol() Protocol {
	if o == nil {
		return Protocol("")
	}
	return o.Protocol
}
