// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// PlatformOptions - Configure cloud platforms of the synthetic availability test probes. If omitted or set to null, no particular cloud platform will be enforced.
type PlatformOptions struct {
	// Cloud platforms hosting synthetic probes.
	ProbePlatforms []DemProbePlatform `json:"probePlatforms"`
	//   Use this field to configure whether availability tests should be performed from all selected
	//   platforms or one randomly selected platform. It has no effect if you provided only one platform
	//   in the `probePlatforms` field.
	//
	//   If set to true, a separate test is made from each of the selected platforms.
	//
	//   If set to false, only one of the selected platforms is chosen every time.
	//
	//   If omitted, the previous setting will stay in effect. If there is no previous setting, the value
	//   will default to false.
	TestFromAll *bool `json:"testFromAll,omitempty"`
}

func (o *PlatformOptions) GetProbePlatforms() []DemProbePlatform {
	if o == nil {
		return []DemProbePlatform{}
	}
	return o.ProbePlatforms
}

func (o *PlatformOptions) GetTestFromAll() *bool {
	if o == nil {
		return nil
	}
	return o.TestFromAll
}

// DemURIAvailabilityCheckSettingsInputFailingTestLocations - How many locations must report a failure for an entity to be considered down.
type DemURIAvailabilityCheckSettingsInputFailingTestLocations string

const (
	DemURIAvailabilityCheckSettingsInputFailingTestLocationsAll DemURIAvailabilityCheckSettingsInputFailingTestLocations = "all"
	DemURIAvailabilityCheckSettingsInputFailingTestLocationsAny DemURIAvailabilityCheckSettingsInputFailingTestLocations = "any"
)

func (e DemURIAvailabilityCheckSettingsInputFailingTestLocations) ToPointer() *DemURIAvailabilityCheckSettingsInputFailingTestLocations {
	return &e
}
func (e *DemURIAvailabilityCheckSettingsInputFailingTestLocations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "any":
		*e = DemURIAvailabilityCheckSettingsInputFailingTestLocations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DemURIAvailabilityCheckSettingsInputFailingTestLocations: %v", v)
	}
}

// OutageConfiguration -   Default conditions when the entity is considered down.
//
//	If omitted or set to null, organization configuration will be used for this entity.
type OutageConfiguration struct {
	// How many locations must report a failure for an entity to be considered down.
	FailingTestLocations DemURIAvailabilityCheckSettingsInputFailingTestLocations `json:"failingTestLocations"`
	// Number of consecutive failing tests for an entity to be considered down.
	ConsecutiveForDown int `json:"consecutiveForDown"`
}

func (o *OutageConfiguration) GetFailingTestLocations() DemURIAvailabilityCheckSettingsInputFailingTestLocations {
	if o == nil {
		return DemURIAvailabilityCheckSettingsInputFailingTestLocations("")
	}
	return o.FailingTestLocations
}

func (o *OutageConfiguration) GetConsecutiveForDown() int {
	if o == nil {
		return 0
	}
	return o.ConsecutiveForDown
}

// Ping -   Use this field to configure ping tests for the URI. If omitted or set to null, ping tests will be disabled.
//
//	One test type (ping or TCP) must be enabled for a URI.
type Ping struct {
	// Use this field to configure ping tests for the URI. If omitted or set to false, ping tests will be disabled.
	// One test type (ping or TCP) must be enabled for a URI.
	Enabled bool `json:"enabled"`
}

func (o *Ping) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

// TCP -   Use this field to configure TCP tests for the URI. If omitted or set to null, TCP tests will be disabled.
//
//	One test type (ping or TCP) must be enabled for a URI.
type TCP struct {
	// Use this field to configure TCP tests for the URI. If omitted or set to false, TCP tests will be disabled.
	// One test type (ping or TCP) must be enabled for a URI.
	Enabled bool `json:"enabled"`
	// Port number to be used in TCP tests.
	Port int `json:"port"`
	// Use this field to specify a string to send in the body of a TCP request.
	StringToSend *string `json:"stringToSend,omitempty"`
	// Use this field to specify a string to search for in the body of a TCP response.
	StringToExpect *string `json:"stringToExpect,omitempty"`
}

func (o *TCP) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *TCP) GetPort() int {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *TCP) GetStringToSend() *string {
	if o == nil {
		return nil
	}
	return o.StringToSend
}

func (o *TCP) GetStringToExpect() *string {
	if o == nil {
		return nil
	}
	return o.StringToExpect
}

type DemURIAvailabilityCheckSettingsInput struct {
	// Configure cloud platforms of the synthetic availability test probes. If omitted or set to null, no particular cloud platform will be enforced.
	PlatformOptions *PlatformOptions `json:"platformOptions,omitempty"`
	//   Configure locations of the synthetic availability test probes.
	//   Acceptable values depend on the selected type and actual values of existing probes.
	TestFrom DemTestFrom `json:"testFrom"`
	// Configure how often availability tests should be performed. Provide a number of seconds that is one of 60, 300, 600, 900, 1800, 3600, 7200, 14400.
	TestIntervalInSeconds float64 `json:"testIntervalInSeconds"`
	//   Default conditions when the entity is considered down.
	//   If omitted or set to null, organization configuration will be used for this entity.
	OutageConfiguration *OutageConfiguration `json:"outageConfiguration,omitempty"`
	//   Use this field to configure ping tests for the URI. If omitted or set to null, ping tests will be disabled.
	//   One test type (ping or TCP) must be enabled for a URI.
	Ping *Ping `json:"ping,omitempty"`
	//   Use this field to configure TCP tests for the URI. If omitted or set to null, TCP tests will be disabled.
	//   One test type (ping or TCP) must be enabled for a URI.
	TCP *TCP `json:"tcp,omitempty"`
}

func (o *DemURIAvailabilityCheckSettingsInput) GetPlatformOptions() *PlatformOptions {
	if o == nil {
		return nil
	}
	return o.PlatformOptions
}

func (o *DemURIAvailabilityCheckSettingsInput) GetTestFrom() DemTestFrom {
	if o == nil {
		return DemTestFrom{}
	}
	return o.TestFrom
}

func (o *DemURIAvailabilityCheckSettingsInput) GetTestIntervalInSeconds() float64 {
	if o == nil {
		return 0.0
	}
	return o.TestIntervalInSeconds
}

func (o *DemURIAvailabilityCheckSettingsInput) GetOutageConfiguration() *OutageConfiguration {
	if o == nil {
		return nil
	}
	return o.OutageConfiguration
}

func (o *DemURIAvailabilityCheckSettingsInput) GetPing() *Ping {
	if o == nil {
		return nil
	}
	return o.Ping
}

func (o *DemURIAvailabilityCheckSettingsInput) GetTCP() *TCP {
	if o == nil {
		return nil
	}
	return o.TCP
}
