// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type MetricsMetricErrorCode string

const (
	MetricsMetricErrorCodeAccessForbidden    MetricsMetricErrorCode = "AccessForbidden"
	MetricsMetricErrorCodeInternalError      MetricsMetricErrorCode = "InternalError"
	MetricsMetricErrorCodeInvalidRequest     MetricsMetricErrorCode = "InvalidRequest"
	MetricsMetricErrorCodeResourceNotFound   MetricsMetricErrorCode = "ResourceNotFound"
	MetricsMetricErrorCodeServiceUnavailable MetricsMetricErrorCode = "ServiceUnavailable"
	MetricsMetricErrorCodeUnauthorized       MetricsMetricErrorCode = "Unauthorized"
	MetricsMetricErrorCodeCannotModifyMetric MetricsMetricErrorCode = "CannotModifyMetric"
	MetricsMetricErrorCodeMetricNameExists   MetricsMetricErrorCode = "MetricNameExists"
)

func (e MetricsMetricErrorCode) ToPointer() *MetricsMetricErrorCode {
	return &e
}
func (e *MetricsMetricErrorCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AccessForbidden":
		fallthrough
	case "InternalError":
		fallthrough
	case "InvalidRequest":
		fallthrough
	case "ResourceNotFound":
		fallthrough
	case "ServiceUnavailable":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "CannotModifyMetric":
		fallthrough
	case "MetricNameExists":
		*e = MetricsMetricErrorCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MetricsMetricErrorCode: %v", v)
	}
}
