// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/solarwinds/swo-sdk-go/swov1/internal/utils"
)

// SslMode - SSL mode such as require, verify-ca, verify-full as applicable
type SslMode string

const (
	SslModeRequire    SslMode = "require"
	SslModeVerfifyCa  SslMode = "verfify-ca"
	SslModeVerifyFull SslMode = "verify-full"
)

func (e SslMode) ToPointer() *SslMode {
	return &e
}
func (e *SslMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "require":
		fallthrough
	case "verfify-ca":
		fallthrough
	case "verify-full":
		*e = SslMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SslMode: %v", v)
	}
}

// SslOptions - SSL connection options, when sslEnabled is true
type SslOptions struct {
	// SSL mode such as require, verify-ca, verify-full as applicable
	SslMode *SslMode `default:"require" json:"sslMode"`
	// CA file path
	SslCAPath *string `default:"" json:"sslCAPath"`
	// SSL key file path
	SslKeyPath *string `default:"" json:"sslKeyPath"`
	// SSL cert file path
	SslCertPath *string `default:"" json:"sslCertPath"`
}

func (s SslOptions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SslOptions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SslOptions) GetSslMode() *SslMode {
	if o == nil {
		return nil
	}
	return o.SslMode
}

func (o *SslOptions) GetSslCAPath() *string {
	if o == nil {
		return nil
	}
	return o.SslCAPath
}

func (o *SslOptions) GetSslKeyPath() *string {
	if o == nil {
		return nil
	}
	return o.SslKeyPath
}

func (o *SslOptions) GetSslCertPath() *string {
	if o == nil {
		return nil
	}
	return o.SslCertPath
}

type DatabaseConnectionOptions struct {
	// Database server host
	Host string `json:"host"`
	// Database server port
	Port *string `json:"port"`
	// Encrypted credentials for connecting to database server when using basic auth method (username, password)
	EncryptedCredentials *string `default:"" json:"encryptedCredentials"`
	// Username for connecting to database server needed only for auth methods other than basic auth
	User *string `default:"" json:"user"`
	// Enable ssl when agent connects to database server
	SslEnabled *bool `default:"false" json:"sslEnabled"`
	// SSL connection options, when sslEnabled is true
	SslOptions *SslOptions `json:"sslOptions"`
	// Cloud region in case of database managed by cloud provider, required for IAM authentication
	CloudRegion *string `default:"" json:"cloudRegion"`
}

func (d DatabaseConnectionOptions) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DatabaseConnectionOptions) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DatabaseConnectionOptions) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *DatabaseConnectionOptions) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *DatabaseConnectionOptions) GetEncryptedCredentials() *string {
	if o == nil {
		return nil
	}
	return o.EncryptedCredentials
}

func (o *DatabaseConnectionOptions) GetUser() *string {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *DatabaseConnectionOptions) GetSslEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.SslEnabled
}

func (o *DatabaseConnectionOptions) GetSslOptions() *SslOptions {
	if o == nil {
		return nil
	}
	return o.SslOptions
}

func (o *DatabaseConnectionOptions) GetCloudRegion() *string {
	if o == nil {
		return nil
	}
	return o.CloudRegion
}
