arazzo: 1.0.1
info:
  title: SWO End-to-End CRUD Contract Tests
  summary: Contract tests that run against the SWO Public API
  version: 0.0.1
sourceDescriptions:
  - name: public-api
    url: https://api.na-01.st-ssp.solarwinds.com/v1/openapi.json
    type: openapi
x-speakeasy-test-server:
  baseUrl: "x-env: CUSTOM_API_URL; https://api.na-01.st-ssp.solarwinds.com"
x-speakeasy-test-security:
  value:
    apiKey:
      x-env: SWO_API_TOKEN
workflows:
  # /v1/changeevents - Create change event operation
  - workflowId: change-events-create
    steps:
      - stepId: create-change-event
        description: Create a new change event
        operationId: createChangeEvent
        requestBody:
          contentType: application/json
          payload: {"name": "swo-sdk-e2e-test-event", "title": "SWO SDK E2E Test Deployment", "source": "swo-sdk-go-test", "description": "End-to-end test deployment event created by SWO SDK", "tags": {"environment": "test", "service": "swo-sdk", "version": "1.0.0"}}
        successCriteria:
          - condition: $statusCode == 202
          - condition: $response.header.Content-Type == application/json
          - condition: $response.body#/id != null
        outputs:
          event_id: $response.body#/id
  # /v1/metrics - Composite metrics CRUD operations
  - workflowId: composite-metrics-crud-lifecycle
    steps:
      - stepId: create
        operationId: createCompositeMetric
        requestBody:
          contentType: application/json
          payload: {"name": "composite.swo.sdk.e2e.create.metric.test", "displayName": "SWO SDK E2E Create Metric Test", "description": "SWO SDK composite metric end to end create test", "formula": "rate(system.disk.io[1m])", "units": "bytes/s"}
        successCriteria:
          - condition: $statusCode == 201
          - condition: $response.header.Content-Type == application/json
          - condition: $response.body#/name == "composite.swo.sdk.e2e.create.metric.test"
          - condition: $response.body#/displayName == "SWO SDK E2E Create Metric Test"
          - condition: $response.body#/description == "SWO SDK composite metric end to end create test"
          - condition: $response.body#/formula == "rate(system.disk.io[1m])"
          - condition: $response.body#/units == "bytes/s"
        outputs:
          name: $response.body#/name
      - stepId: get-metric-by-name
        description: Retrieve the created metric by name
        operationId: getMetricByName
        dependsOn: create
        parameters:
          - name: name
            in: path
            value: $steps.create.outputs.name
        successCriteria:
          - condition: $statusCode == 200
          - condition: $response.header.Content-Type == application/json
          - condition: $response.body#/name == "composite.swo.sdk.e2e.create.metric.test"
        outputs:
          retrieved_metric: $response.body
      - stepId: update
        description: Update the created composite metric
        operationId: updateCompositeMetric
        dependsOn: get-metric-by-name
        parameters:
          - name: name
            in: path
            value: $steps.create.outputs.name
        requestBody:
          contentType: application/json
          payload: {"displayName": "SWO SDK E2E Updated Metric Test", "description": "SWO SDK composite metric end to end updated test", "formula": "rate(system.cpu.usage[2m])", "units": "bytes/s"}
        successCriteria:
          - condition: $statusCode == 200
          - condition: $response.header.Content-Type == application/json
          - condition: $response.body#/name == "composite.swo.sdk.e2e.create.metric.test"
          - condition: $response.body#/displayName == "SWO SDK E2E Updated Metric Test"
          - condition: $response.body#/description == "SWO SDK composite metric end to end updated test"
          - condition: $response.body#/formula == "rate(system.cpu.usage[2m])"
          - condition: $response.body#/units == "bytes/s"
        outputs:
          updated_metric: $response.body
      - stepId: get-updated-metric
        description: Retrieve the updated metric to verify changes
        operationId: getMetricByName
        dependsOn: update
        parameters:
          - name: name
            in: path
            value: $steps.create.outputs.name
        successCriteria:
          - condition: $statusCode == 200
          - condition: $response.header.Content-Type == application/json
          - condition: $response.body#/name == "composite.swo.sdk.e2e.create.metric.test"
          - condition: $response.body#/displayName == "SWO SDK E2E Updated Metric Test"
          - condition: $response.body#/description == "SWO SDK composite metric end to end updated test"
          - condition: $response.body#/formula == "rate(system.cpu.usage[2m])"
          - condition: $response.body#/units == "bytes/s"
        outputs:
          final_metric: $response.body
      - stepId: delete
        description: Delete the composite metric
        operationId: deleteCompositeMetric
        dependsOn: get-updated-metric
        parameters:
          - name: name
            in: path
            value: $steps.create.outputs.name
        successCriteria:
          - condition: $statusCode == 204
  # /v1/logs - Search logs operation
  - workflowId: logs-search
    steps:
      - stepId: search-logs
        description: Search logs with basic parameters
        operationId: searchLogs
        parameters:
          - name: filter
            in: query
            value: "level:info"
          - name: direction
            in: query
            value: "backward"
          - name: pageSize
            in: query
            value: 10
          - name: startTime
            in: query
            value: "2025-06-15T00:00:00Z"
          - name: endTime
            in: query
            value: "2025-07-15T23:59:59Z"
        successCriteria:
          - condition: $statusCode == 200
          - condition: $response.header.Content-Type == application/json
          - condition: $response.body#/pageInfo != null
        outputs:
          search_results: $response.body
          page_info: $response.body#/pageInfo
      - stepId: search-logs-with-filter
        description: Search logs with different filter
        operationId: searchLogs
        dependsOn: search-logs
        parameters:
          - name: filter
            in: query
            value: "level:error"
          - name: direction
            in: query
            value: "forward"
          - name: pageSize
            in: query
            value: 5
          - name: startTime
            in: query
            value: "2024-01-01T00:00:00Z"
          - name: endTime
            in: query
            value: "2024-12-31T23:59:59Z"
        successCriteria:
          - condition: $statusCode == 200
          - condition: $response.header.Content-Type == application/json
          - condition: $response.body#/pageInfo != null
        outputs:
          filter_search_results: $response.body
