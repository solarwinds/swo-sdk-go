lockVersion: 2.0.0
id: 211f109d-fefa-4e6d-8a41-db1221672b8a
management:
  docChecksum: b725d7f7ad3a2d6e3df7d8fb7ee06bae
  docVersion: 1.0.10
  speakeasyVersion: 1.623.0
  generationVersion: 2.713.0
  releaseVersion: 0.10.0
  configChecksum: 2397db6ab7d210bc641c8b8b2e5bd0ae
  repoURL: https://github.com/solarwinds/swo-sdk-go.git
  repoSubDirectory: swov1
  installationURL: https://github.com/solarwinds/swo-sdk-go/swov1
features:
  go:
    additionalDependencies: 0.1.0
    constsAndDefaults: 0.1.12
    core: 3.11.1
    defaultEnabledRetries: 0.2.0
    deprecations: 2.81.3
    devContainers: 2.90.0
    envVarSecurityUsage: 0.3.2
    globalSecurity: 2.82.12
    globalSecurityCallbacks: 0.1.0
    globalSecurityFlattening: 0.1.0
    globalServerURLs: 2.82.3
    ignores: 2.81.1
    inputOutputModels: 2.83.0
    intellisenseMarkdownSupport: 0.1.0
    mockServer: 0.1.1
    nullables: 0.2.0
    pagination: 2.82.4
    responseFormat: 0.1.2
    retries: 2.84.2
    sdkHooks: 0.2.0
    tests: 0.16.2
generatedFiles:
  - .devcontainer/README.md
  - .devcontainer/devcontainer.json
  - .devcontainer/setup.sh
  - .gitattributes
  - /models/apierrors/commonbadrequesterrorresponse.go
  - /models/apierrors/commonconflicterrorresponse.go
  - /models/apierrors/commonforbiddenerrorresponse.go
  - /models/apierrors/commoninternalerrorresponse.go
  - /models/apierrors/commonnotfounderrorresponse.go
  - /models/apierrors/commonunauthorizederrorresponse.go
  - /models/apierrors/commonunavailableerrorresponse.go
  - /models/apierrors/metricsmetricforbiddenerrorresponse.go
  - /models/components/changeeventschangeevent.go
  - /models/components/cloudaccountsawsactivateintegrationrequest.go
  - /models/components/cloudaccountsawsmgmtaccountonboardingrequest.go
  - /models/components/cloudaccountsawsmgmtaccountonboardingresponse.go
  - /models/components/cloudaccountsawsorganisationalunit.go
  - /models/components/cloudaccountsawsorganisationalunitrequest.go
  - /models/components/cloudaccountsawsupdateintegrationrequest.go
  - /models/components/cloudaccountsawsupdateintegrationresponse.go
  - /models/components/commonentityid.go
  - /models/components/commonkeyvaluepair.go
  - /models/components/commonlink.go
  - /models/components/commonmetricinfo.go
  - /models/components/commonpageinfo.go
  - /models/components/commontag.go
  - /models/components/dbodatabaseauthmethod.go
  - /models/components/dbodatabaseconnectionoptions.go
  - /models/components/dbodatabaseconnectionoptionsupdate.go
  - /models/components/dbodatabasecredentialspublickeyresponse.go
  - /models/components/dbodatabasemetricscapturemethod.go
  - /models/components/dbodatabasepluginconfig.go
  - /models/components/dbodatabasepluginconfigresponse.go
  - /models/components/dbodatabasepluginstatus.go
  - /models/components/dbodatabasepluginstatusresponse.go
  - /models/components/dbodatabasessloptions.go
  - /models/components/dbodatabasessloptionsupdate.go
  - /models/components/dbodatabasetype.go
  - /models/components/dboobservedatabaserequest.go
  - /models/components/dboupdatedatabaserequest.go
  - /models/components/demcustomheaders.go
  - /models/components/demgeturiresponse.go
  - /models/components/demgetwebsiteresponse.go
  - /models/components/demlistprobesresponse.go
  - /models/components/demorganizationsettings.go
  - /models/components/demorganizationsettingsinput.go
  - /models/components/demoutageconfiguration.go
  - /models/components/demprobe.go
  - /models/components/demprobeplatform.go
  - /models/components/demtestfrom.go
  - /models/components/demuri.go
  - /models/components/demuriavailabilitychecksettings.go
  - /models/components/demuriavailabilitychecksettingsinput.go
  - /models/components/demwebsite.go
  - /models/components/demwebsiteprotocol.go
  - /models/components/entitiesentity.go
  - /models/components/entitiesentityinput.go
  - /models/components/httpmetadata.go
  - /models/components/logsarchive.go
  - /models/components/logsevent.go
  - /models/components/metricsaggregationmethods.go
  - /models/components/metricscompositemetric.go
  - /models/components/metricsgrouping.go
  - /models/components/metricsmeasurement.go
  - /models/components/metricsmeasurementsrequest.go
  - /models/components/metricsmetricseriestype.go
  - /models/components/metricsupdatecompositemetricrequest.go
  - /models/components/security.go
  - /models/components/tokenscreatetokenrequest.go
  - /models/components/tokenscreatetokenresponse.go
  - /models/operations/activateawsintegration.go
  - /models/operations/createchangeevent.go
  - /models/operations/createcompositemetric.go
  - /models/operations/createorgstructure.go
  - /models/operations/createtoken.go
  - /models/operations/createuri.go
  - /models/operations/createwebsite.go
  - /models/operations/deletecompositemetric.go
  - /models/operations/deletedatabase.go
  - /models/operations/deleteuri.go
  - /models/operations/deletewebsite.go
  - /models/operations/getdemsettings.go
  - /models/operations/getentitybyid.go
  - /models/operations/getmetricbyname.go
  - /models/operations/getpluginconfig.go
  - /models/operations/getplugins.go
  - /models/operations/getpublickey.go
  - /models/operations/geturi.go
  - /models/operations/getwebsite.go
  - /models/operations/listentities.go
  - /models/operations/listentitytypes.go
  - /models/operations/listlogarchives.go
  - /models/operations/listmetricattributes.go
  - /models/operations/listmetricattributevalues.go
  - /models/operations/listmetricmeasurements.go
  - /models/operations/listmetrics.go
  - /models/operations/listmetricsforentitytype.go
  - /models/operations/listmultimetricmeasurements.go
  - /models/operations/listprobes.go
  - /models/operations/observedatabase.go
  - /models/operations/pauseurimonitoring.go
  - /models/operations/pausewebsitemonitoring.go
  - /models/operations/pluginoperation.go
  - /models/operations/searchlogs.go
  - /models/operations/setdemsettings.go
  - /models/operations/unpauseurimonitoring.go
  - /models/operations/unpausewebsitemonitoring.go
  - /models/operations/updateawsintegration.go
  - /models/operations/updatecompositemetric.go
  - /models/operations/updatedatabase.go
  - /models/operations/updateentitybyid.go
  - /models/operations/updateuri.go
  - /models/operations/updatewebsite.go
  - /models/operations/validatemgmtaccountonboarding.go
  - USAGE.md
  - changeevents.go
  - cloudaccounts.go
  - dbo.go
  - dem.go
  - docs/models/apierrors/code.md
  - docs/models/apierrors/commonbadrequesterrorresponse.md
  - docs/models/apierrors/commonconflicterrorresponse.md
  - docs/models/apierrors/commonconflicterrorresponsecode.md
  - docs/models/apierrors/commonforbiddenerrorresponse.md
  - docs/models/apierrors/commonforbiddenerrorresponsecode.md
  - docs/models/apierrors/commoninternalerrorresponse.md
  - docs/models/apierrors/commoninternalerrorresponsecode.md
  - docs/models/apierrors/commonnotfounderrorresponse.md
  - docs/models/apierrors/commonnotfounderrorresponsecode.md
  - docs/models/apierrors/commonunauthorizederrorresponse.md
  - docs/models/apierrors/commonunauthorizederrorresponsecode.md
  - docs/models/apierrors/commonunavailableerrorresponse.md
  - docs/models/apierrors/commonunavailableerrorresponsecode.md
  - docs/models/apierrors/metricsmetricforbiddenerrorresponse.md
  - docs/models/apierrors/metricsmetricforbiddenerrorresponsecode.md
  - docs/models/components/aggregateby.md
  - docs/models/components/availabilitychecksettings.md
  - docs/models/components/category.md
  - docs/models/components/changeeventschangeevent.md
  - docs/models/components/checkforstring.md
  - docs/models/components/cloudaccountsawsactivateintegrationrequest.md
  - docs/models/components/cloudaccountsawsmgmtaccountonboardingrequest.md
  - docs/models/components/cloudaccountsawsmgmtaccountonboardingresponse.md
  - docs/models/components/cloudaccountsawsorganisationalunit.md
  - docs/models/components/cloudaccountsawsorganisationalunitrequest.md
  - docs/models/components/cloudaccountsawsupdateintegrationrequest.md
  - docs/models/components/cloudaccountsawsupdateintegrationresponse.md
  - docs/models/components/commonentityid.md
  - docs/models/components/commonkeyvaluepair.md
  - docs/models/components/commonlink.md
  - docs/models/components/commonmetricinfo.md
  - docs/models/components/commonpageinfo.md
  - docs/models/components/commontag.md
  - docs/models/components/coordinates.md
  - docs/models/components/dbodatabaseauthmethod.md
  - docs/models/components/dbodatabaseconnectionoptions.md
  - docs/models/components/dbodatabaseconnectionoptionsupdate.md
  - docs/models/components/dbodatabasecredentialspublickeyresponse.md
  - docs/models/components/dbodatabasemetricscapturemethod.md
  - docs/models/components/dbodatabasepluginconfig.md
  - docs/models/components/dbodatabasepluginconfigresponse.md
  - docs/models/components/dbodatabasepluginstatus.md
  - docs/models/components/dbodatabasepluginstatusresponse.md
  - docs/models/components/dbodatabasessloptions.md
  - docs/models/components/dbodatabasessloptionsupdate.md
  - docs/models/components/dbodatabasessloptionsupdatesslmode.md
  - docs/models/components/dbodatabasetype.md
  - docs/models/components/dboobservedatabaserequest.md
  - docs/models/components/dboupdatedatabaserequest.md
  - docs/models/components/demcustomheaders.md
  - docs/models/components/demgeturiresponse.md
  - docs/models/components/demgetwebsiteresponse.md
  - docs/models/components/demgetwebsiteresponseavailabilitychecksettings.md
  - docs/models/components/demgetwebsiteresponsecheckforstring.md
  - docs/models/components/demgetwebsiteresponsefailingtestlocations.md
  - docs/models/components/demgetwebsiteresponseoperator.md
  - docs/models/components/demgetwebsiteresponseoutageconfiguration.md
  - docs/models/components/demgetwebsiteresponseplatformoptions.md
  - docs/models/components/demgetwebsiteresponserum.md
  - docs/models/components/demgetwebsiteresponsessl.md
  - docs/models/components/demgetwebsiteresponsestatus.md
  - docs/models/components/demlistprobesresponse.md
  - docs/models/components/demorganizationsettings.md
  - docs/models/components/demorganizationsettingsinput.md
  - docs/models/components/demoutageconfiguration.md
  - docs/models/components/demprobe.md
  - docs/models/components/demprobeplatform.md
  - docs/models/components/demtestfrom.md
  - docs/models/components/demuri.md
  - docs/models/components/demuriavailabilitychecksettings.md
  - docs/models/components/demuriavailabilitychecksettingsfailingtestlocations.md
  - docs/models/components/demuriavailabilitychecksettingsinput.md
  - docs/models/components/demuriavailabilitychecksettingsinputfailingtestlocations.md
  - docs/models/components/demuriavailabilitychecksettingsoutageconfiguration.md
  - docs/models/components/demuriavailabilitychecksettingsping.md
  - docs/models/components/demuriavailabilitychecksettingsplatformoptions.md
  - docs/models/components/demuriavailabilitychecksettingstcp.md
  - docs/models/components/demwebsite.md
  - docs/models/components/demwebsitefailingtestlocations.md
  - docs/models/components/demwebsiteoutageconfiguration.md
  - docs/models/components/demwebsiteplatformoptions.md
  - docs/models/components/demwebsiteprotocol.md
  - docs/models/components/entitiesentity.md
  - docs/models/components/entitiesentityinput.md
  - docs/models/components/failingtestlocations.md
  - docs/models/components/fillmethod.md
  - docs/models/components/healthscore.md
  - docs/models/components/httpmetadata.md
  - docs/models/components/integrationtype.md
  - docs/models/components/logsarchive.md
  - docs/models/components/logsevent.md
  - docs/models/components/metricsaggregationmethods.md
  - docs/models/components/metricscompositemetric.md
  - docs/models/components/metricsgrouping.md
  - docs/models/components/metricsmeasurement.md
  - docs/models/components/metricsmeasurementsrequest.md
  - docs/models/components/metricsmetricseriestype.md
  - docs/models/components/metricsupdatecompositemetricrequest.md
  - docs/models/components/monitoringoptions.md
  - docs/models/components/operator.md
  - docs/models/components/outageconfiguration.md
  - docs/models/components/ping.md
  - docs/models/components/platform.md
  - docs/models/components/platformoptions.md
  - docs/models/components/pregroupbymethod.md
  - docs/models/components/protocol.md
  - docs/models/components/rum.md
  - docs/models/components/security.md
  - docs/models/components/seriestype.md
  - docs/models/components/ssl.md
  - docs/models/components/sslmode.md
  - docs/models/components/status.md
  - docs/models/components/tags.md
  - docs/models/components/tcp.md
  - docs/models/components/tokenscreatetokenrequest.md
  - docs/models/components/tokenscreatetokenrequesttype.md
  - docs/models/components/tokenscreatetokenresponse.md
  - docs/models/components/type.md
  - docs/models/operations/activateawsintegrationresponse.md
  - docs/models/operations/createchangeeventresponse.md
  - docs/models/operations/createchangeeventresponsebody.md
  - docs/models/operations/createcompositemetricresponse.md
  - docs/models/operations/createorgstructureresponse.md
  - docs/models/operations/createtokenresponse.md
  - docs/models/operations/createuriresponse.md
  - docs/models/operations/createwebsiteresponse.md
  - docs/models/operations/deletecompositemetricrequest.md
  - docs/models/operations/deletecompositemetricresponse.md
  - docs/models/operations/deletedatabaserequest.md
  - docs/models/operations/deletedatabaseresponse.md
  - docs/models/operations/deleteurirequest.md
  - docs/models/operations/deleteuriresponse.md
  - docs/models/operations/deletewebsiterequest.md
  - docs/models/operations/deletewebsiteresponse.md
  - docs/models/operations/getdemsettingsresponse.md
  - docs/models/operations/getentitybyidrequest.md
  - docs/models/operations/getentitybyidresponse.md
  - docs/models/operations/getmetricbynamerequest.md
  - docs/models/operations/getmetricbynameresponse.md
  - docs/models/operations/getpluginconfigrequest.md
  - docs/models/operations/getpluginconfigresponse.md
  - docs/models/operations/getpluginsrequest.md
  - docs/models/operations/getpluginsresponse.md
  - docs/models/operations/getpublickeyresponse.md
  - docs/models/operations/geturirequest.md
  - docs/models/operations/geturiresponse.md
  - docs/models/operations/getwebsiterequest.md
  - docs/models/operations/getwebsiteresponse.md
  - docs/models/operations/listentitiesrequest.md
  - docs/models/operations/listentitiesresponse.md
  - docs/models/operations/listentitiesresponsebody.md
  - docs/models/operations/listentitytypesresponse.md
  - docs/models/operations/listentitytypesresponsebody.md
  - docs/models/operations/listlogarchivesrequest.md
  - docs/models/operations/listlogarchivesresponse.md
  - docs/models/operations/listlogarchivesresponsebody.md
  - docs/models/operations/listmetricattributesrequest.md
  - docs/models/operations/listmetricattributesresponse.md
  - docs/models/operations/listmetricattributesresponsebody.md
  - docs/models/operations/listmetricattributevaluesrequest.md
  - docs/models/operations/listmetricattributevaluesresponse.md
  - docs/models/operations/listmetricattributevaluesresponsebody.md
  - docs/models/operations/listmetricmeasurementsrequest.md
  - docs/models/operations/listmetricmeasurementsresponse.md
  - docs/models/operations/listmetricmeasurementsresponsebody.md
  - docs/models/operations/listmetricsforentitytyperequest.md
  - docs/models/operations/listmetricsforentitytyperesponse.md
  - docs/models/operations/listmetricsforentitytyperesponsebody.md
  - docs/models/operations/listmetricsrequest.md
  - docs/models/operations/listmetricsresponse.md
  - docs/models/operations/listmetricsresponsebody.md
  - docs/models/operations/listmultimetricmeasurementsrequest.md
  - docs/models/operations/listmultimetricmeasurementsrequestbody.md
  - docs/models/operations/listmultimetricmeasurementsresponse.md
  - docs/models/operations/listmultimetricmeasurementsresponsebody.md
  - docs/models/operations/listprobesresponse.md
  - docs/models/operations/metrics.md
  - docs/models/operations/observedatabaseresponse.md
  - docs/models/operations/observedatabaseresponsebody.md
  - docs/models/operations/option.md
  - docs/models/operations/pauseurimonitoringrequest.md
  - docs/models/operations/pauseurimonitoringresponse.md
  - docs/models/operations/pausewebsitemonitoringrequest.md
  - docs/models/operations/pausewebsitemonitoringresponse.md
  - docs/models/operations/pluginoperationrequest.md
  - docs/models/operations/pluginoperationresponse.md
  - docs/models/operations/searchlogsrequest.md
  - docs/models/operations/searchlogsresponse.md
  - docs/models/operations/searchlogsresponsebody.md
  - docs/models/operations/setdemsettingsresponse.md
  - docs/models/operations/unpauseurimonitoringrequest.md
  - docs/models/operations/unpauseurimonitoringresponse.md
  - docs/models/operations/unpausewebsitemonitoringrequest.md
  - docs/models/operations/unpausewebsitemonitoringresponse.md
  - docs/models/operations/updateawsintegrationresponse.md
  - docs/models/operations/updatecompositemetricrequest.md
  - docs/models/operations/updatecompositemetricresponse.md
  - docs/models/operations/updatedatabaserequest.md
  - docs/models/operations/updatedatabaseresponse.md
  - docs/models/operations/updateentitybyidrequest.md
  - docs/models/operations/updateentitybyidresponse.md
  - docs/models/operations/updateurirequest.md
  - docs/models/operations/updateuriresponse.md
  - docs/models/operations/updatewebsiterequest.md
  - docs/models/operations/updatewebsiteresponse.md
  - docs/models/operations/validatemgmtaccountonboardingrequest.md
  - docs/models/operations/validatemgmtaccountonboardingresponse.md
  - docs/sdks/changeevents/README.md
  - docs/sdks/cloudaccounts/README.md
  - docs/sdks/dbo/README.md
  - docs/sdks/dem/README.md
  - docs/sdks/entities/README.md
  - docs/sdks/logs/README.md
  - docs/sdks/metadata/README.md
  - docs/sdks/metrics/README.md
  - docs/sdks/swo/README.md
  - docs/sdks/tokens/README.md
  - entities.go
  - go.mod
  - internal/config/sdkconfiguration.go
  - internal/hooks/hooks.go
  - internal/utils/contenttype.go
  - internal/utils/env.go
  - internal/utils/form.go
  - internal/utils/headers.go
  - internal/utils/json.go
  - internal/utils/pathparams.go
  - internal/utils/queryparams.go
  - internal/utils/requestbody.go
  - internal/utils/retries.go
  - internal/utils/security.go
  - internal/utils/utils.go
  - logs.go
  - metadata.go
  - metrics.go
  - models/apierrors/apierror.go
  - models/operations/options.go
  - optionalnullable/optionalnullable.go
  - optionalnullable/optionalnullable_test.go
  - retry/config.go
  - swo.go
  - tests/files.go
  - tests/mockserver/.gitignore
  - tests/mockserver/Dockerfile
  - tests/mockserver/Makefile
  - tests/mockserver/README.md
  - tests/mockserver/go.mod
  - tests/mockserver/go.sum
  - tests/mockserver/internal/handler/assert/contenttype.go
  - tests/mockserver/internal/handler/assert/header.go
  - tests/mockserver/internal/handler/assert/parameter.go
  - tests/mockserver/internal/handler/assert/pointer.go
  - tests/mockserver/internal/handler/assert/security.go
  - tests/mockserver/internal/handler/doc.go
  - tests/mockserver/internal/handler/generated_handler.go
  - tests/mockserver/internal/handler/generated_handlers.go
  - tests/mockserver/internal/handler/pathdeletev1metricsname.go
  - tests/mockserver/internal/handler/pathgetv1logs.go
  - tests/mockserver/internal/handler/pathgetv1logsarchives.go
  - tests/mockserver/internal/handler/pathgetv1metricsname.go
  - tests/mockserver/internal/handler/pathpostv1changeevents.go
  - tests/mockserver/internal/handler/pathpostv1metrics.go
  - tests/mockserver/internal/handler/pathputv1metricsname.go
  - tests/mockserver/internal/handler/values/files.go
  - tests/mockserver/internal/logging/doc.go
  - tests/mockserver/internal/logging/formats.go
  - tests/mockserver/internal/logging/http_file.go
  - tests/mockserver/internal/logging/http_logger.go
  - tests/mockserver/internal/logging/levels.go
  - tests/mockserver/internal/logging/logger.go
  - tests/mockserver/internal/logging/oas_operation.go
  - tests/mockserver/internal/logging/oas_operation_call.go
  - tests/mockserver/internal/sdk/models/components/changeeventschangeevent.go
  - tests/mockserver/internal/sdk/models/components/cloudaccountsawsactivateintegrationrequest.go
  - tests/mockserver/internal/sdk/models/components/cloudaccountsawsmgmtaccountonboardingrequest.go
  - tests/mockserver/internal/sdk/models/components/cloudaccountsawsmgmtaccountonboardingresponse.go
  - tests/mockserver/internal/sdk/models/components/cloudaccountsawsorganisationalunit.go
  - tests/mockserver/internal/sdk/models/components/cloudaccountsawsorganisationalunitrequest.go
  - tests/mockserver/internal/sdk/models/components/cloudaccountsawsupdateintegrationrequest.go
  - tests/mockserver/internal/sdk/models/components/cloudaccountsawsupdateintegrationresponse.go
  - tests/mockserver/internal/sdk/models/components/commonbadrequesterrorresponse.go
  - tests/mockserver/internal/sdk/models/components/commonconflicterrorresponse.go
  - tests/mockserver/internal/sdk/models/components/commonentityid.go
  - tests/mockserver/internal/sdk/models/components/commonforbiddenerrorresponse.go
  - tests/mockserver/internal/sdk/models/components/commoninternalerrorresponse.go
  - tests/mockserver/internal/sdk/models/components/commonkeyvaluepair.go
  - tests/mockserver/internal/sdk/models/components/commonlink.go
  - tests/mockserver/internal/sdk/models/components/commonmetricinfo.go
  - tests/mockserver/internal/sdk/models/components/commonnotfounderrorresponse.go
  - tests/mockserver/internal/sdk/models/components/commonpageinfo.go
  - tests/mockserver/internal/sdk/models/components/commontag.go
  - tests/mockserver/internal/sdk/models/components/commonunauthorizederrorresponse.go
  - tests/mockserver/internal/sdk/models/components/commonunavailableerrorresponse.go
  - tests/mockserver/internal/sdk/models/components/dbodatabaseauthmethod.go
  - tests/mockserver/internal/sdk/models/components/dbodatabaseconnectionoptions.go
  - tests/mockserver/internal/sdk/models/components/dbodatabaseconnectionoptionsupdate.go
  - tests/mockserver/internal/sdk/models/components/dbodatabasecredentialspublickeyresponse.go
  - tests/mockserver/internal/sdk/models/components/dbodatabasemetricscapturemethod.go
  - tests/mockserver/internal/sdk/models/components/dbodatabasepluginconfig.go
  - tests/mockserver/internal/sdk/models/components/dbodatabasepluginconfigresponse.go
  - tests/mockserver/internal/sdk/models/components/dbodatabasepluginstatus.go
  - tests/mockserver/internal/sdk/models/components/dbodatabasepluginstatusresponse.go
  - tests/mockserver/internal/sdk/models/components/dbodatabasessloptions.go
  - tests/mockserver/internal/sdk/models/components/dbodatabasessloptionsupdate.go
  - tests/mockserver/internal/sdk/models/components/dbodatabasetype.go
  - tests/mockserver/internal/sdk/models/components/dboobservedatabaserequest.go
  - tests/mockserver/internal/sdk/models/components/dboupdatedatabaserequest.go
  - tests/mockserver/internal/sdk/models/components/demcustomheaders.go
  - tests/mockserver/internal/sdk/models/components/demgeturiresponse.go
  - tests/mockserver/internal/sdk/models/components/demgetwebsiteresponse.go
  - tests/mockserver/internal/sdk/models/components/demlistprobesresponse.go
  - tests/mockserver/internal/sdk/models/components/demorganizationsettings.go
  - tests/mockserver/internal/sdk/models/components/demorganizationsettingsinput.go
  - tests/mockserver/internal/sdk/models/components/demoutageconfiguration.go
  - tests/mockserver/internal/sdk/models/components/demprobe.go
  - tests/mockserver/internal/sdk/models/components/demprobeplatform.go
  - tests/mockserver/internal/sdk/models/components/demtestfrom.go
  - tests/mockserver/internal/sdk/models/components/demuri.go
  - tests/mockserver/internal/sdk/models/components/demuriavailabilitychecksettings.go
  - tests/mockserver/internal/sdk/models/components/demuriavailabilitychecksettingsinput.go
  - tests/mockserver/internal/sdk/models/components/demwebsite.go
  - tests/mockserver/internal/sdk/models/components/demwebsiteprotocol.go
  - tests/mockserver/internal/sdk/models/components/entitiesentity.go
  - tests/mockserver/internal/sdk/models/components/entitiesentityinput.go
  - tests/mockserver/internal/sdk/models/components/httpmetadata.go
  - tests/mockserver/internal/sdk/models/components/logsarchive.go
  - tests/mockserver/internal/sdk/models/components/logsevent.go
  - tests/mockserver/internal/sdk/models/components/metricsaggregationmethods.go
  - tests/mockserver/internal/sdk/models/components/metricscompositemetric.go
  - tests/mockserver/internal/sdk/models/components/metricsgrouping.go
  - tests/mockserver/internal/sdk/models/components/metricsmeasurement.go
  - tests/mockserver/internal/sdk/models/components/metricsmeasurementsrequest.go
  - tests/mockserver/internal/sdk/models/components/metricsmetricforbiddenerrorresponse.go
  - tests/mockserver/internal/sdk/models/components/metricsmetricseriestype.go
  - tests/mockserver/internal/sdk/models/components/metricsupdatecompositemetricrequest.go
  - tests/mockserver/internal/sdk/models/components/security.go
  - tests/mockserver/internal/sdk/models/components/tokenscreatetokenrequest.go
  - tests/mockserver/internal/sdk/models/components/tokenscreatetokenresponse.go
  - tests/mockserver/internal/sdk/models/operations/activateawsintegration.go
  - tests/mockserver/internal/sdk/models/operations/createchangeevent.go
  - tests/mockserver/internal/sdk/models/operations/createcompositemetric.go
  - tests/mockserver/internal/sdk/models/operations/createorgstructure.go
  - tests/mockserver/internal/sdk/models/operations/createtoken.go
  - tests/mockserver/internal/sdk/models/operations/createuri.go
  - tests/mockserver/internal/sdk/models/operations/createwebsite.go
  - tests/mockserver/internal/sdk/models/operations/deletecompositemetric.go
  - tests/mockserver/internal/sdk/models/operations/deletedatabase.go
  - tests/mockserver/internal/sdk/models/operations/deleteuri.go
  - tests/mockserver/internal/sdk/models/operations/deletewebsite.go
  - tests/mockserver/internal/sdk/models/operations/getdemsettings.go
  - tests/mockserver/internal/sdk/models/operations/getentitybyid.go
  - tests/mockserver/internal/sdk/models/operations/getmetricbyname.go
  - tests/mockserver/internal/sdk/models/operations/getpluginconfig.go
  - tests/mockserver/internal/sdk/models/operations/getplugins.go
  - tests/mockserver/internal/sdk/models/operations/getpublickey.go
  - tests/mockserver/internal/sdk/models/operations/geturi.go
  - tests/mockserver/internal/sdk/models/operations/getwebsite.go
  - tests/mockserver/internal/sdk/models/operations/listentities.go
  - tests/mockserver/internal/sdk/models/operations/listentitytypes.go
  - tests/mockserver/internal/sdk/models/operations/listlogarchives.go
  - tests/mockserver/internal/sdk/models/operations/listmetricattributes.go
  - tests/mockserver/internal/sdk/models/operations/listmetricattributevalues.go
  - tests/mockserver/internal/sdk/models/operations/listmetricmeasurements.go
  - tests/mockserver/internal/sdk/models/operations/listmetrics.go
  - tests/mockserver/internal/sdk/models/operations/listmetricsforentitytype.go
  - tests/mockserver/internal/sdk/models/operations/listmultimetricmeasurements.go
  - tests/mockserver/internal/sdk/models/operations/listprobes.go
  - tests/mockserver/internal/sdk/models/operations/observedatabase.go
  - tests/mockserver/internal/sdk/models/operations/pauseurimonitoring.go
  - tests/mockserver/internal/sdk/models/operations/pausewebsitemonitoring.go
  - tests/mockserver/internal/sdk/models/operations/pluginoperation.go
  - tests/mockserver/internal/sdk/models/operations/searchlogs.go
  - tests/mockserver/internal/sdk/models/operations/setdemsettings.go
  - tests/mockserver/internal/sdk/models/operations/unpauseurimonitoring.go
  - tests/mockserver/internal/sdk/models/operations/unpausewebsitemonitoring.go
  - tests/mockserver/internal/sdk/models/operations/updateawsintegration.go
  - tests/mockserver/internal/sdk/models/operations/updatecompositemetric.go
  - tests/mockserver/internal/sdk/models/operations/updatedatabase.go
  - tests/mockserver/internal/sdk/models/operations/updateentitybyid.go
  - tests/mockserver/internal/sdk/models/operations/updateuri.go
  - tests/mockserver/internal/sdk/models/operations/updatewebsite.go
  - tests/mockserver/internal/sdk/models/operations/validatemgmtaccountonboarding.go
  - tests/mockserver/internal/sdk/models/sdkerrors/commonbadrequesterrorresponse.go
  - tests/mockserver/internal/sdk/models/sdkerrors/commonconflicterrorresponse.go
  - tests/mockserver/internal/sdk/models/sdkerrors/commonforbiddenerrorresponse.go
  - tests/mockserver/internal/sdk/models/sdkerrors/commoninternalerrorresponse.go
  - tests/mockserver/internal/sdk/models/sdkerrors/commonnotfounderrorresponse.go
  - tests/mockserver/internal/sdk/models/sdkerrors/commonunauthorizederrorresponse.go
  - tests/mockserver/internal/sdk/models/sdkerrors/commonunavailableerrorresponse.go
  - tests/mockserver/internal/sdk/models/sdkerrors/metricsmetricforbiddenerrorresponse.go
  - tests/mockserver/internal/sdk/types/bigint.go
  - tests/mockserver/internal/sdk/types/date.go
  - tests/mockserver/internal/sdk/types/datetime.go
  - tests/mockserver/internal/sdk/types/decimal.go
  - tests/mockserver/internal/sdk/types/jsonl/jsonl.go
  - tests/mockserver/internal/sdk/types/pointers.go
  - tests/mockserver/internal/sdk/utils/json.go
  - tests/mockserver/internal/sdk/utils/reflect.go
  - tests/mockserver/internal/sdk/utils/sort.go
  - tests/mockserver/internal/server/doc.go
  - tests/mockserver/internal/server/generated_handlers.go
  - tests/mockserver/internal/server/internal_handlers.go
  - tests/mockserver/internal/server/server.go
  - tests/mockserver/internal/server/server_option.go
  - tests/mockserver/internal/server/templates/log/index.html.tmpl
  - tests/mockserver/internal/server/templates/log/operation.html.tmpl
  - tests/mockserver/internal/server/templates/log/style.css.tmpl
  - tests/mockserver/internal/tracking/requesttracker.go
  - tests/mockserver/main.go
  - tests/sdk_test.go
  - tests/testclient.go
  - tokens.go
  - types/bigint.go
  - types/date.go
  - types/datetime.go
  - types/decimal.go
  - types/pointers.go
examples:
  createChangeEvent:
    speakeasy-default-create-change-event:
      requestBody:
        application/json: {"id": 1731676626, "name": "app-deploys", "title": "deployed v45", "timestamp": 1731676626, "source": "foo3.example.com", "tags": {"app": "foo", "environment": "production"}, "links": [{"rel": "self", "href": "https://example.com"}]}
      responses:
        "200":
          application/json: {"id": 208943}
        "202":
          application/json: {"id": 208943}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  activateAwsIntegration:
    speakeasy-default-activate-aws-integration:
      requestBody:
        application/json: {"managementAccountId": "<id>", "accountId": "<id>", "enable": true}
      responses:
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  createOrgStructure:
    speakeasy-default-create-org-structure:
      requestBody:
        application/json: {"mgmtAccountId": "<id>", "structure": []}
      responses:
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  updateAwsIntegration:
    speakeasy-default-update-aws-integration:
      requestBody:
        application/json: {"managementAccountId": "<id>", "accountId": "<id>", "accountName": "<value>", "roleArn": "<value>"}
      responses:
        "200":
          application/json: {"selectedRegions": ["<value 1>", "<value 2>", "<value 3>"], "externalId": "<id>", "integrationId": "<id>", "integrationType": "STREAMING", "isNewAccount": true}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  validateMgmtAccountOnboarding:
    speakeasy-default-validate-mgmt-account-onboarding:
      parameters:
        query:
          request: {"managementAccountId": "<id>"}
      responses:
        "200":
          application/json: {"isOnboarded": true}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  observeDatabase:
    speakeasy-default-observe-database:
      requestBody:
        application/json: {"name": "<value>", "agentId": "<id>", "dbType": "mongo", "authMethod": "entraclientsecret", "dbConnOptions": {"host": "mixed-scrap.com", "port": "", "dbname": "", "encryptedCredentials": "", "user": "", "sslEnabled": false, "cloudRegion": "", "bindings": ""}}
      responses:
        "201":
          application/json: {"id": "<id>"}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  getPublicKey:
    speakeasy-default-get-public-key:
      responses:
        "200":
          application/json: {"publicKey": "<value>"}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  updateDatabase:
    speakeasy-default-update-database:
      parameters:
        path:
          entityId: "<id>"
      requestBody:
        application/json: {"name": ""}
      responses:
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  deleteDatabase:
    speakeasy-default-delete-database:
      parameters:
        path:
          entityId: "<id>"
      responses:
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  getPluginConfig:
    speakeasy-default-get-plugin-config:
      parameters:
        path:
          entityId: "<id>"
      responses:
        "200":
          application/json: {"pluginConfig": [{"pluginName": "<value>", "configOptions": [{"key": "<key>", "value": "<value>"}], "dbConnOptions": []}]}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  getPlugins:
    speakeasy-default-get-plugins:
      parameters:
        path:
          entityId: "<id>"
      responses:
        "200":
          application/json: {"plugins": [{"pluginName": "<value>", "deploymentStatus": "<value>", "healthStatus": "<value>"}]}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  pluginOperation:
    speakeasy-default-plugin-operation:
      parameters:
        path:
          entityId: "<id>"
          operation: "<value>"
      responses:
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  listProbes:
    speakeasy-default-list-probes:
      responses:
        "200":
          application/json: {"probes": [{"id": "probe-1", "name": "Washington", "active": true, "platform": "AWS", "region": "NA", "country": "US", "city": "Washington D.C.", "coordinates": {"latitude": 38.89511, "longitude": -77.03637}, "ipv4Addresses": ["34.232.5.40", "44.207.30.12"], "ipv6Addresses": ["2001:0db8:85a3:0000:0000:8a2e:0370:7334"]}]}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
  getDemSettings:
    speakeasy-default-get-dem-settings:
      responses:
        "200":
          application/json: {"availabilityOutageConfiguration": {"failingTestLocations": "all", "consecutiveForDown": 2}, "transactionOutageConfiguration": {"failingTestLocations": "all", "consecutiveForDown": 2}}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  setDemSettings:
    speakeasy-default-set-dem-settings:
      requestBody:
        application/json: {"availabilityOutageConfiguration": {"failingTestLocations": "all", "consecutiveForDown": 2}, "transactionOutageConfiguration": {"failingTestLocations": "all", "consecutiveForDown": 2}}
      responses:
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  createUri:
    speakeasy-default-create-uri:
      requestBody:
        application/json: {"name": "solarwinds.com", "ipOrDomain": "solarwinds.com", "availabilityCheckSettings": {"platformOptions": {"probePlatforms": ["AWS"], "testFromAll": true}, "testFrom": {"type": "REGION", "values": ["NA"]}, "testIntervalInSeconds": 14400, "outageConfiguration": null, "ping": {"enabled": true}, "tcp": {"enabled": true, "port": 443, "stringToSend": "GET / HTTP/1.1\r\nHost: solarwinds.com\r\nConnection: close\r\n\r\n", "stringToExpect": "HTTP/1.1 200 OK"}}, "tags": [{"key": "environment", "value": "production"}]}
      responses:
        "201":
          application/json: {"id": "e-1448474379026206720"}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  getUri:
    speakeasy-default-get-uri:
      parameters:
        path:
          entityId: "<id>"
      responses:
        "200":
          application/json: {"id": "e-1448474379026206720", "type": "Uri", "status": "up", "name": "solarwinds.com", "ipOrDomain": "solarwinds.com", "availabilityCheckSettings": {"platformOptions": {"probePlatforms": ["AWS"], "testFromAll": true}, "testFrom": {"type": "REGION", "values": ["NA"]}, "testIntervalInSeconds": 14400, "outageConfiguration": {"failingTestLocations": "all", "consecutiveForDown": 2}, "ping": {"enabled": true}, "tcp": {"enabled": true, "port": 443, "stringToSend": "GET / HTTP/1.1\r\nHost: solarwinds.com\r\nConnection: close\r\n\r\n", "stringToExpect": "HTTP/1.1 200 OK"}, "protocol": "PING"}, "tags": [{"key": "environment", "value": "production"}], "lastOutageStartTime": "2025-01-15T14:31:19.735Z", "lastOutageEndTime": "2025-01-15T14:31:19.735Z", "lastTestTime": "2025-01-15T14:31:19.735Z", "lastErrorTime": "2025-01-15T14:31:19.735Z", "lastResponseTime": 376}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  updateUri:
    speakeasy-default-update-uri:
      parameters:
        path:
          entityId: "<id>"
      requestBody:
        application/json: {"name": "solarwinds.com", "ipOrDomain": "solarwinds.com", "availabilityCheckSettings": {"platformOptions": {"probePlatforms": ["AWS"], "testFromAll": true}, "testFrom": {"type": "REGION", "values": ["NA"]}, "testIntervalInSeconds": 14400, "outageConfiguration": {"failingTestLocations": "all", "consecutiveForDown": 2}, "ping": {"enabled": true}, "tcp": {"enabled": true, "port": 443, "stringToSend": "GET / HTTP/1.1\r\nHost: solarwinds.com\r\nConnection: close\r\n\r\n", "stringToExpect": "HTTP/1.1 200 OK"}}, "tags": [{"key": "environment", "value": "production"}]}
      responses:
        "200":
          application/json: {"id": "e-1448474379026206720"}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  deleteUri:
    speakeasy-default-delete-uri:
      parameters:
        path:
          entityId: "<id>"
      responses:
        "200":
          application/json: {"id": "e-1448474379026206720"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  pauseUriMonitoring:
    speakeasy-default-pause-uri-monitoring:
      parameters:
        path:
          entityId: "<id>"
      responses:
        "200":
          application/json: {"id": "e-1448474379026206720"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  unpauseUriMonitoring:
    speakeasy-default-unpause-uri-monitoring:
      parameters:
        path:
          entityId: "<id>"
      responses:
        "200":
          application/json: {"id": "e-1448474379026206720"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  createWebsite:
    speakeasy-default-create-website:
      requestBody:
        application/json: {"name": "solarwinds.com", "url": "https://www.solarwinds.com", "availabilityCheckSettings": {"platformOptions": {"probePlatforms": ["AWS"], "testFromAll": true}, "testFrom": {"type": "REGION", "values": ["NA"]}, "testIntervalInSeconds": 14400, "outageConfiguration": {"failingTestLocations": "all", "consecutiveForDown": 2}, "checkForString": {"operator": "CONTAINS", "value": "string"}, "protocols": ["HTTP", "HTTPS"], "ssl": {"enabled": true, "daysPriorToExpiration": 7, "ignoreIntermediateCertificates": true}, "customHeaders": [{"name": "string", "value": "string"}], "allowInsecureRenegotiation": true, "postData": "{\"example\": \"value\"}"}, "tags": [{"key": "environment", "value": "production"}], "rum": {"apdexTimeInSeconds": 4, "spa": true}}
      responses:
        "201":
          application/json: {"id": "e-1448474379026206720"}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  getWebsite:
    speakeasy-default-get-website:
      parameters:
        path:
          entityId: "<id>"
      responses:
        "200":
          application/json: {"id": "e-1448474379026206720", "type": "Website", "status": "up", "name": "solarwinds.com", "url": "https://www.solarwinds.com", "monitoringOptions": {"isAvailabilityActive": true, "isRumActive": false}, "availabilityCheckSettings": null, "tags": [{"key": "environment", "value": "production"}], "rum": {"apdexTimeInSeconds": 4, "snippet": "string", "spa": true}, "lastOutageStartTime": "2025-01-15T14:31:19.735Z", "lastOutageEndTime": "2025-01-15T14:31:19.735Z", "lastTestTime": "2025-01-15T14:31:19.735Z", "lastErrorTime": "2025-01-15T14:31:19.735Z", "lastResponseTime": 376, "nextOnDemandAvailabilityTime": 0}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  updateWebsite:
    speakeasy-default-update-website:
      parameters:
        path:
          entityId: "<id>"
      requestBody:
        application/json: {"name": "solarwinds.com", "url": "https://www.solarwinds.com", "availabilityCheckSettings": {"platformOptions": {"probePlatforms": ["AWS"], "testFromAll": true}, "testFrom": {"type": "REGION", "values": ["NA"]}, "testIntervalInSeconds": 14400, "outageConfiguration": {"failingTestLocations": "all", "consecutiveForDown": 2}, "checkForString": {"operator": "CONTAINS", "value": "string"}, "protocols": ["HTTP", "HTTPS"], "ssl": {"enabled": true, "daysPriorToExpiration": 7, "ignoreIntermediateCertificates": true}, "customHeaders": [{"name": "string", "value": "string"}], "allowInsecureRenegotiation": true, "postData": "{\"example\": \"value\"}"}, "tags": [{"key": "environment", "value": "production"}], "rum": {"apdexTimeInSeconds": 4, "spa": true}}
      responses:
        "200":
          application/json: {"id": "e-1448474379026206720"}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  deleteWebsite:
    speakeasy-default-delete-website:
      parameters:
        path:
          entityId: "<id>"
      responses:
        "200":
          application/json: {"id": "e-1448474379026206720"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  pauseWebsiteMonitoring:
    speakeasy-default-pause-website-monitoring:
      parameters:
        path:
          entityId: "<id>"
      responses:
        "200":
          application/json: {"id": "e-1448474379026206720"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  unpauseWebsiteMonitoring:
    speakeasy-default-unpause-website-monitoring:
      parameters:
        path:
          entityId: "<id>"
      responses:
        "200":
          application/json: {"id": "e-1448474379026206720"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  listEntities:
    speakeasy-default-list-entities:
      parameters:
        query:
          type: "<value>"
      responses:
        "200":
          application/json: {"entities": [{"id": "e-1234567890", "type": "SyslogHost", "name": "syslog-host-1", "displayName": "SyslogTest", "createdTime": "2024-11-25T16:38:24Z", "updatedTime": "2024-12-01T16:38:24Z", "lastSeenTime": "2024-11-25T16:38:24Z", "inMaintenance": false, "healthscore": {"score": 100, "category": "good"}, "tags": {"gg.tk.token": "test", "kfi.tk.token": "qa-test"}, "attributes": {"protocols": ["HTTP"], "features": ["rum"], "isAvailabilityCheckPaused": false, "extensions": {"has_extension": true}}}], "pageInfo": {"prevPage": "<value>", "nextPage": "<value>"}}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  getEntityById:
    speakeasy-default-get-entity-by-id:
      parameters:
        path:
          id: "<id>"
      responses:
        "200":
          application/json: {"id": "e-1234567890", "type": "SyslogHost", "name": "syslog-host-1", "displayName": "SyslogTest", "createdTime": "2024-11-25T16:38:24Z", "updatedTime": "2024-12-01T16:38:24Z", "lastSeenTime": "2024-11-25T16:38:24Z", "inMaintenance": false, "healthscore": {"score": 100, "category": "good"}, "tags": {"gg.tk.token": "test", "kfi.tk.token": "qa-test"}, "attributes": {"protocols": ["HTTP"], "features": ["rum"], "isAvailabilityCheckPaused": false, "extensions": {"has_extension": true}}}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  updateEntityById:
    speakeasy-default-update-entity-by-id:
      parameters:
        path:
          id: "<id>"
      requestBody:
        application/json: {"displayName": "SyslogTest", "tags": {"gg.tk.token": "test", "kfi.tk.token": "qa-test"}}
      responses:
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  searchLogs:
    speakeasy-default-search-logs:
      parameters:
        query:
          direction: "backward"
      responses:
        "200":
          application/json: {"logs": [], "pageInfo": {"prevPage": "<value>", "nextPage": "<value>"}}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  listLogArchives:
    speakeasy-default-list-log-archives:
      parameters:
        query:
          startTime: "<value>"
          endTime: "<value>"
      responses:
        "200":
          application/json: {"logArchives": [], "pageInfo": {"prevPage": "<value>", "nextPage": "<value>"}}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  listEntityTypes:
    speakeasy-default-list-entity-types:
      responses:
        "200":
          application/json: {"types": ["Service", "ServiceInstance", "KubernetesCluster"]}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  listMetricsForEntityType:
    speakeasy-default-list-metrics-for-entity-type:
      parameters:
        path:
          type: "<value>"
      responses:
        "200":
          application/json: {"type": "KubernetesCluster", "metrics": [{"name": "composite.k8s.pod.container.status.restarts.increase", "units": "count", "formula": "increase(k8s.kube_pod_container_status_restarts_total[5m])", "lastReportedTime": "2021-01-01T00:00:00Z"}]}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  listMetrics:
    speakeasy-default-list-metrics:
      responses:
        "200":
          application/json: {"metricsInfo": [], "pageInfo": {"prevPage": "<value>", "nextPage": "<value>"}}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  createCompositeMetric:
    speakeasy-default-create-composite-metric:
      requestBody:
        application/json: {"name": "composite.custom.system.disk.io.rate", "displayName": "Disk IO rate", "description": "Disk bytes transferred per second", "formula": "rate(system.disk.io[5m])", "units": "bytes/s"}
      responses:
        "201":
          application/json: {"name": "composite.custom.system.disk.io.rate", "displayName": "Disk IO rate", "description": "Disk bytes transferred per second", "formula": "rate(system.disk.io[5m])", "units": "bytes/s"}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "403":
          application/json: {"message": "Access is forbidden"}
        "409":
          application/json: {"message": "Error has occurred", "code": "ResourceConflict"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  listMultiMetricMeasurements:
    speakeasy-default-list-multi-metric-measurements:
      parameters:
        query:
          forcePositional: false
      requestBody:
        application/json: {"metrics": []}
      responses:
        "200":
          application/json: {"metrics": [], "pageInfo": {"prevPage": "<value>", "nextPage": "<value>"}}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  updateCompositeMetric:
    speakeasy-default-update-composite-metric:
      parameters:
        path:
          name: "<value>"
      requestBody:
        application/json: {"displayName": "Disk IO rate", "description": "Disk bytes transferred per second", "formula": "rate(system.disk.io[5m])", "units": "bytes/s"}
      responses:
        "200":
          application/json: {"name": "composite.custom.system.disk.io.rate", "displayName": "Disk IO rate", "description": "Disk bytes transferred per second", "formula": "rate(system.disk.io[5m])", "units": "bytes/s"}
        "400":
          application/json: {"message": "Error has occurred", "code": "InvalidRequest"}
        "403":
          application/json: {"message": "Error has occurred", "code": "CannotModifyMetric"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  deleteCompositeMetric:
    speakeasy-default-delete-composite-metric:
      parameters:
        path:
          name: "<value>"
      responses:
        "403":
          application/json: {"message": "Error has occurred", "code": "CannotModifyMetric"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  getMetricByName:
    speakeasy-default-get-metric-by-name:
      parameters:
        path:
          name: "<value>"
      responses:
        "200":
          application/json: {"name": "composite.custom.system.disk.io.rate", "displayName": "Disk IO rate", "description": "Disk bytes transferred per second", "units": "bytes/s", "formula": "rate(system.disk.io[5m]", "lastReportedTime": "2024-11-25T16:38:24Z"}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  listMetricAttributes:
    speakeasy-default-list-metric-attributes:
      parameters:
        path:
          name: "<value>"
      responses:
        "200":
          application/json: {"names": ["<value 1>", "<value 2>", "<value 3>"], "pageInfo": {"prevPage": "<value>", "nextPage": "<value>"}}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  listMetricAttributeValues:
    speakeasy-default-list-metric-attribute-values:
      parameters:
        path:
          name: "<value>"
          attributeName: "<value>"
      responses:
        "200":
          application/json: {"name": "<value>", "values": ["<value 1>", "<value 2>", "<value 3>"], "pageInfo": {"prevPage": "<value>", "nextPage": "<value>"}}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  listMetricMeasurements:
    speakeasy-default-list-metric-measurements:
      parameters:
        path:
          name: "<value>"
        query:
          seriesType: "TIMESERIES"
      responses:
        "200":
          application/json: {"groupings": [{"attributes": [], "measurements": []}], "bucketSizeInSeconds": 845799, "pageInfo": {"prevPage": "<value>", "nextPage": "<value>"}}
        "404":
          application/json: {"message": "Error has occurred", "code": "ResourceNotFound"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
  createToken:
    speakeasy-default-create-token:
      requestBody:
        application/json: {"name": "<value>", "tags": {"server": "<value>", "tag_without_value": "<value>"}, "type": "ingestion"}
      responses:
        "200":
          application/json: {"token": "1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"}
        "201":
          application/json: {"token": "1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"}
        "401":
          application/json: {"message": "Error has occurred", "code": "Unauthorized"}
        "403":
          application/json: {"message": "Error has occurred", "code": "AccessForbidden"}
        "500":
          application/json: {"message": "Error has occurred", "code": "InternalError"}
        "503":
          application/json: {"message": "Error has occurred", "code": "ServiceUnavailable"}
examplesVersion: 1.0.2
generatedTests:
  createChangeEvent: "2025-05-02T09:35:26-06:00"
  activateAwsIntegration: "2025-05-02T09:35:26-06:00"
  createOrgStructure: "2025-05-02T09:35:26-06:00"
  updateAwsIntegration: "2025-05-02T09:35:26-06:00"
  validateMgmtAccountOnboarding: "2025-05-02T09:35:26-06:00"
  observeDatabase: "2025-05-02T09:35:26-06:00"
  getPublicKey: "2025-05-02T09:35:26-06:00"
  updateDatabase: "2025-05-02T09:35:26-06:00"
  deleteDatabase: "2025-05-02T09:35:26-06:00"
  getPluginConfig: "2025-05-02T09:35:26-06:00"
  getPlugins: "2025-05-02T09:35:26-06:00"
  pluginOperation: "2025-05-02T09:35:26-06:00"
  getDemSettings: "2025-05-02T09:35:26-06:00"
  setDemSettings: "2025-05-02T09:35:26-06:00"
  createWebsite: "2025-05-02T09:35:26-06:00"
  getWebsite: "2025-05-02T09:35:26-06:00"
  updateWebsite: "2025-05-02T09:35:26-06:00"
  deleteWebsite: "2025-05-02T09:35:26-06:00"
  pauseWebsiteMonitoring: "2025-05-02T09:35:26-06:00"
  unpauseWebsiteMonitoring: "2025-05-02T09:35:26-06:00"
  listEntities: "2025-05-02T09:35:26-06:00"
  getEntityById: "2025-05-02T09:35:26-06:00"
  updateEntityById: "2025-05-02T09:35:26-06:00"
  searchLogs: "2025-05-02T09:35:26-06:00"
  listLogArchives: "2025-05-02T09:35:26-06:00"
  listEntityTypes: "2025-05-02T09:35:26-06:00"
  listMetricsForEntityType: "2025-05-02T09:35:26-06:00"
  listMetrics: "2025-05-02T09:35:26-06:00"
  createCompositeMetric: "2025-05-02T09:35:26-06:00"
  listMultiMetricMeasurements: "2025-05-02T09:35:26-06:00"
  updateCompositeMetric: "2025-05-02T09:35:26-06:00"
  deleteCompositeMetric: "2025-05-02T09:35:26-06:00"
  getMetricByName: "2025-05-02T09:35:26-06:00"
  listMetricAttributes: "2025-05-02T09:35:26-06:00"
  listMetricAttributeValues: "2025-05-02T09:35:26-06:00"
  listMetricMeasurements: "2025-05-02T09:35:26-06:00"
  createToken: "2025-05-02T09:35:26-06:00"
  listProbes: "2025-05-13T00:19:34Z"
  createUri: "2025-05-13T00:19:34Z"
  getUri: "2025-05-13T00:19:34Z"
  updateUri: "2025-05-13T00:19:34Z"
  deleteUri: "2025-05-13T00:19:34Z"
  pauseUriMonitoring: "2025-05-13T00:19:34Z"
  unpauseUriMonitoring: "2025-05-13T00:19:34Z"
releaseNotes: |
  ## Go SDK Changes Detected:
  * `Swo.Dem.GetDemSettings()`:  `response` **Changed** **Breaking** :warning:
  * `Swo.Dem.SetDemSettings()`:  `request.Request` **Changed** **Breaking** :warning:
