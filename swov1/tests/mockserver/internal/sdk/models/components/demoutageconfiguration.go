// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// DemOutageConfigurationFailingTestLocations - How many locations must report a failure for an entity to be considered down.
type DemOutageConfigurationFailingTestLocations string

const (
	DemOutageConfigurationFailingTestLocationsAll DemOutageConfigurationFailingTestLocations = "all"
	DemOutageConfigurationFailingTestLocationsAny DemOutageConfigurationFailingTestLocations = "any"
)

func (e DemOutageConfigurationFailingTestLocations) ToPointer() *DemOutageConfigurationFailingTestLocations {
	return &e
}
func (e *DemOutageConfigurationFailingTestLocations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "any":
		*e = DemOutageConfigurationFailingTestLocations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DemOutageConfigurationFailingTestLocations: %v", v)
	}
}

type DemOutageConfiguration struct {
	// How many locations must report a failure for an entity to be considered down.
	FailingTestLocations DemOutageConfigurationFailingTestLocations `json:"failingTestLocations"`
	// Number of consecutive failing tests for an entity to be considered down.
	ConsecutiveForDown int `json:"consecutiveForDown"`
}

func (o *DemOutageConfiguration) GetFailingTestLocations() DemOutageConfigurationFailingTestLocations {
	if o == nil {
		return DemOutageConfigurationFailingTestLocations("")
	}
	return o.FailingTestLocations
}

func (o *DemOutageConfiguration) GetConsecutiveForDown() int {
	if o == nil {
		return 0
	}
	return o.ConsecutiveForDown
}
