// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// CommonBadRequestErrorResponseCode - Uniquely identifies an error condition.
type CommonBadRequestErrorResponseCode string

const (
	CommonBadRequestErrorResponseCodeAccessForbidden    CommonBadRequestErrorResponseCode = "AccessForbidden"
	CommonBadRequestErrorResponseCodeInternalError      CommonBadRequestErrorResponseCode = "InternalError"
	CommonBadRequestErrorResponseCodeInvalidRequest     CommonBadRequestErrorResponseCode = "InvalidRequest"
	CommonBadRequestErrorResponseCodeResourceConflict   CommonBadRequestErrorResponseCode = "ResourceConflict"
	CommonBadRequestErrorResponseCodeResourceNotFound   CommonBadRequestErrorResponseCode = "ResourceNotFound"
	CommonBadRequestErrorResponseCodeServiceUnavailable CommonBadRequestErrorResponseCode = "ServiceUnavailable"
	CommonBadRequestErrorResponseCodeUnauthorized       CommonBadRequestErrorResponseCode = "Unauthorized"
)

func (e CommonBadRequestErrorResponseCode) ToPointer() *CommonBadRequestErrorResponseCode {
	return &e
}
func (e *CommonBadRequestErrorResponseCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AccessForbidden":
		fallthrough
	case "InternalError":
		fallthrough
	case "InvalidRequest":
		fallthrough
	case "ResourceConflict":
		fallthrough
	case "ResourceNotFound":
		fallthrough
	case "ServiceUnavailable":
		fallthrough
	case "Unauthorized":
		*e = CommonBadRequestErrorResponseCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommonBadRequestErrorResponseCode: %v", v)
	}
}
