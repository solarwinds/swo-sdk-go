// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

type GetURIResponseStatus string

const (
	GetURIResponseStatusUp          GetURIResponseStatus = "up"
	GetURIResponseStatusDown        GetURIResponseStatus = "down"
	GetURIResponseStatusPaused      GetURIResponseStatus = "paused"
	GetURIResponseStatusMaintenance GetURIResponseStatus = "maintenance"
	GetURIResponseStatusUnknown     GetURIResponseStatus = "unknown"
)

func (e GetURIResponseStatus) ToPointer() *GetURIResponseStatus {
	return &e
}
func (e *GetURIResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "up":
		fallthrough
	case "down":
		fallthrough
	case "paused":
		fallthrough
	case "maintenance":
		fallthrough
	case "unknown":
		*e = GetURIResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetURIResponseStatus: %v", v)
	}
}

type GetURIResponse struct {
	ID     string               `json:"id"`
	Type   string               `json:"type"`
	Status GetURIResponseStatus `json:"status"`
	//   Name of the URI, which must be unique within the organization.
	//   The name must also not contain any control characters, any white space other than space (U+0020), or any consecutive, leading or trailing spaces.
	Name string `json:"name"`
	// IP/domain address of the URI.
	IPOrDomain string `json:"ipOrDomain"`
	// Availability tests configuration for the URI.
	AvailabilityCheckSettings URIAvailabilityCheckSettings `json:"availabilityCheckSettings"`
	// Entity tags. Tag is a key-value pair, where there may be only single tag value for the same key.
	Tags []Tag `json:"tags,omitempty"`
	// Time when the last outage started.
	LastOutageStartTime *time.Time `json:"lastOutageStartTime,omitempty"`
	// Time when the last outage ended.
	LastOutageEndTime *time.Time `json:"lastOutageEndTime,omitempty"`
	// Time when the last test was performed.
	LastTestTime *time.Time `json:"lastTestTime,omitempty"`
	// Last time when a synthetic test failed.
	LastErrorTime *time.Time `json:"lastErrorTime,omitempty"`
	// Response time from the last synthetic check in milliseconds.
	LastResponseTime *int `json:"lastResponseTime,omitempty"`
}

func (g GetURIResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetURIResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetURIResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetURIResponse) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetURIResponse) GetStatus() GetURIResponseStatus {
	if o == nil {
		return GetURIResponseStatus("")
	}
	return o.Status
}

func (o *GetURIResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetURIResponse) GetIPOrDomain() string {
	if o == nil {
		return ""
	}
	return o.IPOrDomain
}

func (o *GetURIResponse) GetAvailabilityCheckSettings() URIAvailabilityCheckSettings {
	if o == nil {
		return URIAvailabilityCheckSettings{}
	}
	return o.AvailabilityCheckSettings
}

func (o *GetURIResponse) GetTags() []Tag {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *GetURIResponse) GetLastOutageStartTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastOutageStartTime
}

func (o *GetURIResponse) GetLastOutageEndTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastOutageEndTime
}

func (o *GetURIResponse) GetLastTestTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastTestTime
}

func (o *GetURIResponse) GetLastErrorTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastErrorTime
}

func (o *GetURIResponse) GetLastResponseTime() *int {
	if o == nil {
		return nil
	}
	return o.LastResponseTime
}
