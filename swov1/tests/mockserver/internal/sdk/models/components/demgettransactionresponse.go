// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

type DemGetTransactionResponseStatus string

const (
	DemGetTransactionResponseStatusUp          DemGetTransactionResponseStatus = "up"
	DemGetTransactionResponseStatusDown        DemGetTransactionResponseStatus = "down"
	DemGetTransactionResponseStatusPaused      DemGetTransactionResponseStatus = "paused"
	DemGetTransactionResponseStatusMaintenance DemGetTransactionResponseStatus = "maintenance"
	DemGetTransactionResponseStatusUnknown     DemGetTransactionResponseStatus = "unknown"
)

func (e DemGetTransactionResponseStatus) ToPointer() *DemGetTransactionResponseStatus {
	return &e
}
func (e *DemGetTransactionResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "up":
		fallthrough
	case "down":
		fallthrough
	case "paused":
		fallthrough
	case "maintenance":
		fallthrough
	case "unknown":
		*e = DemGetTransactionResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DemGetTransactionResponseStatus: %v", v)
	}
}

type DemGetTransactionResponse struct {
	ID     string                          `json:"id"`
	Type   string                          `json:"type"`
	Status DemGetTransactionResponseStatus `json:"status"`
	// Name of the transaction, which must be unique within the organization. The name must not contain any control characters, any white space other than space (U+0020), or any consecutive, leading or trailing spaces.
	Name string `json:"name"`
	// Description of the transaction.
	Description *string `json:"description,omitempty"`
	// Id of an entity to which the transaction is connected.
	RelatedEntityID *string `json:"relatedEntityId,omitempty"`
	// Test definition for the transaction.
	TestDefinition DemTransactionTestDefinition `json:"testDefinition"`
	// Entity tags. Tag is a key-value pair, where there may be only single tag value for the same key.
	Tags []CommonTag `json:"tags,omitempty"`
	// Time when the last outage started.
	LastOutageStartTime *time.Time `json:"lastOutageStartTime,omitempty"`
	// Time when the last outage ended.
	LastOutageEndTime *time.Time `json:"lastOutageEndTime,omitempty"`
	// Time when the last test was performed.
	LastTestTime *time.Time `json:"lastTestTime,omitempty"`
	// Last time when a synthetic test failed.
	LastErrorTime *time.Time `json:"lastErrorTime,omitempty"`
}

func (d DemGetTransactionResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DemGetTransactionResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"id", "type", "status", "name", "testDefinition"}); err != nil {
		return err
	}
	return nil
}

func (o *DemGetTransactionResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DemGetTransactionResponse) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *DemGetTransactionResponse) GetStatus() DemGetTransactionResponseStatus {
	if o == nil {
		return DemGetTransactionResponseStatus("")
	}
	return o.Status
}

func (o *DemGetTransactionResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DemGetTransactionResponse) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *DemGetTransactionResponse) GetRelatedEntityID() *string {
	if o == nil {
		return nil
	}
	return o.RelatedEntityID
}

func (o *DemGetTransactionResponse) GetTestDefinition() DemTransactionTestDefinition {
	if o == nil {
		return DemTransactionTestDefinition{}
	}
	return o.TestDefinition
}

func (o *DemGetTransactionResponse) GetTags() []CommonTag {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *DemGetTransactionResponse) GetLastOutageStartTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastOutageStartTime
}

func (o *DemGetTransactionResponse) GetLastOutageEndTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastOutageEndTime
}

func (o *DemGetTransactionResponse) GetLastTestTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastTestTime
}

func (o *DemGetTransactionResponse) GetLastErrorTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastErrorTime
}
