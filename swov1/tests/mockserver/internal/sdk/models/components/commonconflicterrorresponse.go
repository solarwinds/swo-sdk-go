// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// CommonConflictErrorResponseCode - Uniquely identifies an error condition.
type CommonConflictErrorResponseCode string

const (
	CommonConflictErrorResponseCodeAccessForbidden    CommonConflictErrorResponseCode = "AccessForbidden"
	CommonConflictErrorResponseCodeInternalError      CommonConflictErrorResponseCode = "InternalError"
	CommonConflictErrorResponseCodeInvalidRequest     CommonConflictErrorResponseCode = "InvalidRequest"
	CommonConflictErrorResponseCodeResourceConflict   CommonConflictErrorResponseCode = "ResourceConflict"
	CommonConflictErrorResponseCodeResourceNotFound   CommonConflictErrorResponseCode = "ResourceNotFound"
	CommonConflictErrorResponseCodeServiceUnavailable CommonConflictErrorResponseCode = "ServiceUnavailable"
	CommonConflictErrorResponseCodeUnauthorized       CommonConflictErrorResponseCode = "Unauthorized"
)

func (e CommonConflictErrorResponseCode) ToPointer() *CommonConflictErrorResponseCode {
	return &e
}
func (e *CommonConflictErrorResponseCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AccessForbidden":
		fallthrough
	case "InternalError":
		fallthrough
	case "InvalidRequest":
		fallthrough
	case "ResourceConflict":
		fallthrough
	case "ResourceNotFound":
		fallthrough
	case "ServiceUnavailable":
		fallthrough
	case "Unauthorized":
		*e = CommonConflictErrorResponseCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommonConflictErrorResponseCode: %v", v)
	}
}
