// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// DemURIAvailabilityCheckSettingsPlatformOptions - Configure cloud platforms of the synthetic availability test probes. If omitted or set to null, any available cloud platform may be chosen.
type DemURIAvailabilityCheckSettingsPlatformOptions struct {
	// Cloud platforms hosting synthetic probes.
	ProbePlatforms []DemProbePlatform `json:"probePlatforms"`
	//   Use this field to configure whether availability tests should be performed from all selected
	//   platforms or one randomly selected platform. It has no effect if you provided only one platform
	//   in the `probePlatforms` field.
	//
	//   If set to true, a separate test is made from each of the selected platforms.
	//
	//   If set to false, only one of the selected platforms is chosen every time.
	//
	//   If omitted, the previous setting will stay in effect. If there is no previous setting, the value
	//   will default to false.
	TestFromAll *bool `json:"testFromAll,omitempty"`
}

func (o *DemURIAvailabilityCheckSettingsPlatformOptions) GetProbePlatforms() []DemProbePlatform {
	if o == nil {
		return []DemProbePlatform{}
	}
	return o.ProbePlatforms
}

func (o *DemURIAvailabilityCheckSettingsPlatformOptions) GetTestFromAll() *bool {
	if o == nil {
		return nil
	}
	return o.TestFromAll
}

// DemURIAvailabilityCheckSettingsFailingTestLocations - How many locations must report a failure for an entity to be considered down.
type DemURIAvailabilityCheckSettingsFailingTestLocations string

const (
	DemURIAvailabilityCheckSettingsFailingTestLocationsAll DemURIAvailabilityCheckSettingsFailingTestLocations = "all"
	DemURIAvailabilityCheckSettingsFailingTestLocationsAny DemURIAvailabilityCheckSettingsFailingTestLocations = "any"
)

func (e DemURIAvailabilityCheckSettingsFailingTestLocations) ToPointer() *DemURIAvailabilityCheckSettingsFailingTestLocations {
	return &e
}
func (e *DemURIAvailabilityCheckSettingsFailingTestLocations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "any":
		*e = DemURIAvailabilityCheckSettingsFailingTestLocations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DemURIAvailabilityCheckSettingsFailingTestLocations: %v", v)
	}
}

// DemURIAvailabilityCheckSettingsOutageConfiguration -   Default conditions when the entity is considered down.
//
//	If omitted or set to null, organization configuration will be used for this entity.
type DemURIAvailabilityCheckSettingsOutageConfiguration struct {
	// How many locations must report a failure for an entity to be considered down.
	FailingTestLocations DemURIAvailabilityCheckSettingsFailingTestLocations `json:"failingTestLocations"`
	// Number of consecutive failing tests for an entity to be considered down.
	ConsecutiveForDown int `json:"consecutiveForDown"`
}

func (o *DemURIAvailabilityCheckSettingsOutageConfiguration) GetFailingTestLocations() DemURIAvailabilityCheckSettingsFailingTestLocations {
	if o == nil {
		return DemURIAvailabilityCheckSettingsFailingTestLocations("")
	}
	return o.FailingTestLocations
}

func (o *DemURIAvailabilityCheckSettingsOutageConfiguration) GetConsecutiveForDown() int {
	if o == nil {
		return 0
	}
	return o.ConsecutiveForDown
}

// DemURIAvailabilityCheckSettingsDNS - DNS tests configuration for the URI. If omitted or set to null, DNS tests are disabled.
type DemURIAvailabilityCheckSettingsDNS struct {
	// Enables or disables DNS tests for the URI.
	// Exactly one test type (DNS, ping, TCP, or UDP) must be enabled for a URI.
	Enabled bool `json:"enabled"`
	// Nameserver to be used for DNS queries. Can be an IP address or domain name.
	Nameserver string `json:"nameserver"`
	// Port number to be used for DNS queries.
	Port *int `json:"port,omitempty"`
	// Expected IP address in DNS response.
	IPToExpect string `json:"ipToExpect"`
}

func (o *DemURIAvailabilityCheckSettingsDNS) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *DemURIAvailabilityCheckSettingsDNS) GetNameserver() string {
	if o == nil {
		return ""
	}
	return o.Nameserver
}

func (o *DemURIAvailabilityCheckSettingsDNS) GetPort() *int {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *DemURIAvailabilityCheckSettingsDNS) GetIPToExpect() string {
	if o == nil {
		return ""
	}
	return o.IPToExpect
}

// DemURIAvailabilityCheckSettingsPing - Ping tests configuration for the URI. If omitted or set to null, ping tests are disabled.
type DemURIAvailabilityCheckSettingsPing struct {
	// Enables or disables ping tests for the URI.
	// Exactly one test type (DNS, ping, TCP, or UDP) must be enabled for a URI.
	Enabled bool `json:"enabled"`
}

func (o *DemURIAvailabilityCheckSettingsPing) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

// DemURIAvailabilityCheckSettingsTCP - TCP tests configuration for the URI. If omitted or set to null, TCP tests are disabled.
type DemURIAvailabilityCheckSettingsTCP struct {
	// Enables or disables TCP tests for the URI.
	// Exactly one test type (DNS, ping, TCP, or UDP) must be enabled for a URI.
	Enabled bool `json:"enabled"`
	// Port number to be used in TCP tests.
	Port int `json:"port"`
	// String to send in the body of a TCP request.
	StringToSend *string `json:"stringToSend,omitempty"`
	// String to search for in the body of a TCP response.
	StringToExpect *string `json:"stringToExpect,omitempty"`
}

func (o *DemURIAvailabilityCheckSettingsTCP) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *DemURIAvailabilityCheckSettingsTCP) GetPort() int {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *DemURIAvailabilityCheckSettingsTCP) GetStringToSend() *string {
	if o == nil {
		return nil
	}
	return o.StringToSend
}

func (o *DemURIAvailabilityCheckSettingsTCP) GetStringToExpect() *string {
	if o == nil {
		return nil
	}
	return o.StringToExpect
}

// DemURIAvailabilityCheckSettingsUDP - UDP tests configuration for the URI. If omitted or set to null, UDP tests are disabled.
type DemURIAvailabilityCheckSettingsUDP struct {
	// Enables or disables UDP tests for the URI.
	// Exactly one test type (DNS, ping, TCP, or UDP) must be enabled for a URI.
	Enabled bool `json:"enabled"`
	// Port number to be used in UDP tests.
	Port int `json:"port"`
	// String to send in the body of a UDP request.
	StringToSend string `json:"stringToSend"`
	// String to search for in the body of a UDP response.
	StringToExpect string `json:"stringToExpect"`
}

func (o *DemURIAvailabilityCheckSettingsUDP) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *DemURIAvailabilityCheckSettingsUDP) GetPort() int {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *DemURIAvailabilityCheckSettingsUDP) GetStringToSend() string {
	if o == nil {
		return ""
	}
	return o.StringToSend
}

func (o *DemURIAvailabilityCheckSettingsUDP) GetStringToExpect() string {
	if o == nil {
		return ""
	}
	return o.StringToExpect
}

// Protocol used to test availability of the URI.
type Protocol string

const (
	ProtocolDNS  Protocol = "DNS"
	ProtocolPing Protocol = "PING"
	ProtocolTCP  Protocol = "TCP"
	ProtocolUDP  Protocol = "UDP"
)

func (e Protocol) ToPointer() *Protocol {
	return &e
}
func (e *Protocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DNS":
		fallthrough
	case "PING":
		fallthrough
	case "TCP":
		fallthrough
	case "UDP":
		*e = Protocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Protocol: %v", v)
	}
}

type DemURIAvailabilityCheckSettings struct {
	// Configure cloud platforms of the synthetic availability test probes. If omitted or set to null, any available cloud platform may be chosen.
	PlatformOptions *DemURIAvailabilityCheckSettingsPlatformOptions `json:"platformOptions,omitempty"`
	//   Configure locations of the synthetic availability test probes.
	//   Acceptable values depend on the selected type and actual values of existing probes.
	TestFrom DemTestFrom `json:"testFrom"`
	// Configure how often availability tests should be performed. Provide a number of seconds that is one of 60, 300, 600, 900, 1800, 3600, 7200, 14400.
	TestIntervalInSeconds float64 `json:"testIntervalInSeconds"`
	//   Default conditions when the entity is considered down.
	//   If omitted or set to null, organization configuration will be used for this entity.
	OutageConfiguration *DemURIAvailabilityCheckSettingsOutageConfiguration `json:"outageConfiguration,omitempty"`
	// DNS tests configuration for the URI. If omitted or set to null, DNS tests are disabled.
	DNS *DemURIAvailabilityCheckSettingsDNS `json:"dns,omitempty"`
	// Ping tests configuration for the URI. If omitted or set to null, ping tests are disabled.
	Ping *DemURIAvailabilityCheckSettingsPing `json:"ping,omitempty"`
	// TCP tests configuration for the URI. If omitted or set to null, TCP tests are disabled.
	TCP *DemURIAvailabilityCheckSettingsTCP `json:"tcp,omitempty"`
	// UDP tests configuration for the URI. If omitted or set to null, UDP tests are disabled.
	UDP *DemURIAvailabilityCheckSettingsUDP `json:"udp,omitempty"`
	// Protocol used to test availability of the URI.
	Protocol Protocol `json:"protocol"`
}

func (o *DemURIAvailabilityCheckSettings) GetPlatformOptions() *DemURIAvailabilityCheckSettingsPlatformOptions {
	if o == nil {
		return nil
	}
	return o.PlatformOptions
}

func (o *DemURIAvailabilityCheckSettings) GetTestFrom() DemTestFrom {
	if o == nil {
		return DemTestFrom{}
	}
	return o.TestFrom
}

func (o *DemURIAvailabilityCheckSettings) GetTestIntervalInSeconds() float64 {
	if o == nil {
		return 0.0
	}
	return o.TestIntervalInSeconds
}

func (o *DemURIAvailabilityCheckSettings) GetOutageConfiguration() *DemURIAvailabilityCheckSettingsOutageConfiguration {
	if o == nil {
		return nil
	}
	return o.OutageConfiguration
}

func (o *DemURIAvailabilityCheckSettings) GetDNS() *DemURIAvailabilityCheckSettingsDNS {
	if o == nil {
		return nil
	}
	return o.DNS
}

func (o *DemURIAvailabilityCheckSettings) GetPing() *DemURIAvailabilityCheckSettingsPing {
	if o == nil {
		return nil
	}
	return o.Ping
}

func (o *DemURIAvailabilityCheckSettings) GetTCP() *DemURIAvailabilityCheckSettingsTCP {
	if o == nil {
		return nil
	}
	return o.TCP
}

func (o *DemURIAvailabilityCheckSettings) GetUDP() *DemURIAvailabilityCheckSettingsUDP {
	if o == nil {
		return nil
	}
	return o.UDP
}

func (o *DemURIAvailabilityCheckSettings) GetProtocol() Protocol {
	if o == nil {
		return Protocol("")
	}
	return o.Protocol
}
