// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// CommonNotFoundErrorResponseCode - Uniquely identifies an error condition.
type CommonNotFoundErrorResponseCode string

const (
	CommonNotFoundErrorResponseCodeAccessForbidden    CommonNotFoundErrorResponseCode = "AccessForbidden"
	CommonNotFoundErrorResponseCodeInternalError      CommonNotFoundErrorResponseCode = "InternalError"
	CommonNotFoundErrorResponseCodeInvalidRequest     CommonNotFoundErrorResponseCode = "InvalidRequest"
	CommonNotFoundErrorResponseCodeResourceConflict   CommonNotFoundErrorResponseCode = "ResourceConflict"
	CommonNotFoundErrorResponseCodeResourceNotFound   CommonNotFoundErrorResponseCode = "ResourceNotFound"
	CommonNotFoundErrorResponseCodeServiceUnavailable CommonNotFoundErrorResponseCode = "ServiceUnavailable"
	CommonNotFoundErrorResponseCodeUnauthorized       CommonNotFoundErrorResponseCode = "Unauthorized"
)

func (e CommonNotFoundErrorResponseCode) ToPointer() *CommonNotFoundErrorResponseCode {
	return &e
}
func (e *CommonNotFoundErrorResponseCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AccessForbidden":
		fallthrough
	case "InternalError":
		fallthrough
	case "InvalidRequest":
		fallthrough
	case "ResourceConflict":
		fallthrough
	case "ResourceNotFound":
		fallthrough
	case "ServiceUnavailable":
		fallthrough
	case "Unauthorized":
		*e = CommonNotFoundErrorResponseCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommonNotFoundErrorResponseCode: %v", v)
	}
}
