// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetV1DemTransactionsEntityID(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "getTransaction[0]":
			dir.HandlerFunc("getTransaction", testGetTransactionGetTransaction0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetTransactionGetTransaction0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *components.DemGetTransactionResponse = &components.DemGetTransactionResponse{
		ID:     "e-1448474379026206720",
		Type:   "SyntheticTransaction",
		Status: components.DemGetTransactionResponseStatusUp,
		Name:   "<value>",
		TestDefinition: components.DemTransactionTestDefinition{
			TestFrom: components.DemTestFrom{
				Type: components.DemTestFromTypeRegion,
				Values: []string{
					"NA",
				},
			},
			PlatformOptions: &components.DemTransactionTestDefinitionPlatformOptions{
				ProbePlatforms: []components.DemProbePlatform{
					components.DemProbePlatformAws,
				},
				TestFromAll: types.Bool(true),
			},
			OutageConfiguration: &components.DemTransactionTestDefinitionOutageConfiguration{
				FailingTestLocations: components.DemTransactionTestDefinitionFailingTestLocationsAll,
				ConsecutiveForDown:   2,
			},
			TestIntervalInSeconds: 14400,
			WindowSize: components.DemWindowSize{
				Width:  806070,
				Height: 380201,
			},
			Commands: []components.DemTransactionCommand{
				components.DemTransactionCommand{
					Command: components.DemTransactionCommandNameOpen,
					Target:  types.String("https://example.com"),
				},
			},
		},
		Tags: []components.CommonTag{
			components.CommonTag{
				Key:   "environment",
				Value: "production",
			},
		},
		LastOutageStartTime: types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastOutageEndTime:   types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastTestTime:        types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastErrorTime:       types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
