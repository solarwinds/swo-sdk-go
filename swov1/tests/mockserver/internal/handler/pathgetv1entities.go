// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/models/operations"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetV1Entities(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "listEntities[0]":
			dir.HandlerFunc("listEntities", testListEntitiesListEntities0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testListEntitiesListEntities0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *operations.ListEntitiesResponseBody = &operations.ListEntitiesResponseBody{
		Entities: []components.EntitiesEntity{
			components.EntitiesEntity{
				ID:            "e-1234567890",
				Type:          "SyslogHost",
				Name:          types.String("syslog-host-1"),
				DisplayName:   types.String("SyslogTest"),
				CreatedTime:   types.MustNewTimeFromString("2024-11-25T16:38:24Z"),
				UpdatedTime:   types.MustNewTimeFromString("2024-12-01T16:38:24Z"),
				LastSeenTime:  types.MustTimeFromString("2024-11-25T16:38:24Z"),
				InMaintenance: false,
				Healthscore: &components.Healthscore{
					Score:    100,
					Category: components.CategoryGood,
				},
				Tags: map[string]*string{
					"gg.tk.token":  types.String("test"),
					"kfi.tk.token": types.String("qa-test"),
				},
				Attributes: map[string]any{
					"protocols": []any{
						"HTTP",
					},
					"features": []any{
						"rum",
					},
					"isAvailabilityCheckPaused": false,
					"extensions": map[string]any{
						"has_extension": true,
					},
				},
			},
		},
		PageInfo: components.CommonPageInfo{
			PrevPage: "<value>",
			NextPage: "<value>",
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
