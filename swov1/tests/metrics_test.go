// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"github.com/solarwinds/swo-sdk-go/swov1"
	"github.com/solarwinds/swo-sdk-go/swov1/internal/utils"
	"github.com/solarwinds/swo-sdk-go/swov1/models/components"
	"github.com/solarwinds/swo-sdk-go/swov1/models/operations"
	"github.com/solarwinds/swo-sdk-go/swov1/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestMetrics_ListMetrics(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listMetrics")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Metrics.ListMetrics(ctx, operations.ListMetricsRequest{})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListMetricsResponseBody{
		MetricsInfo: []components.CommonMetricInfo{},
		PageInfo: components.CommonPageInfo{
			PrevPage: "<value>",
			NextPage: "<value>",
		},
	}, res.Object)

}

func TestMetrics_CreateCompositeMetric(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createCompositeMetric")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Metrics.CreateCompositeMetric(ctx, components.MetricsCompositeMetric{
		Name:        "composite.custom.system.disk.io.rate",
		DisplayName: swov1.String("Disk IO rate"),
		Description: swov1.String("Disk bytes transferred per second"),
		Formula:     "rate(system.disk.io[5m])",
		Units:       swov1.String("bytes/s"),
	})
	require.NoError(t, err)
	assert.Equal(t, 201, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.MetricsCompositeMetric)
	assert.Equal(t, &components.MetricsCompositeMetric{
		Name:        "composite.custom.system.disk.io.rate",
		DisplayName: swov1.String("Disk IO rate"),
		Description: swov1.String("Disk bytes transferred per second"),
		Formula:     "rate(system.disk.io[5m])",
		Units:       swov1.String("bytes/s"),
	}, res.MetricsCompositeMetric)

}

func TestMetrics_ListMultiMetricMeasurements(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listMultiMetricMeasurements")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Metrics.ListMultiMetricMeasurements(ctx, operations.ListMultiMetricMeasurementsRequest{
		RequestBody: operations.ListMultiMetricMeasurementsRequestBody{
			Metrics: []components.MetricsMeasurementsRequest{
				components.MetricsMeasurementsRequest{
					ID:     swov1.String("throughput-series"),
					Name:   "dbo.host.queries.tput",
					Filter: swov1.String("id:[id1,id2] category:moderate"),
					GroupBy: []string{
						"query",
					},
					PreGroupBy: []string{
						"host",
					},
					PreGroupByMethod: components.PreGroupByMethodSum.ToPointer(),
				},
				components.MetricsMeasurementsRequest{
					ID:     swov1.String("throughput-series"),
					Name:   "dbo.host.queries.tput",
					Filter: swov1.String("id:[id1,id2] category:moderate"),
					GroupBy: []string{
						"query",
					},
					PreGroupBy: []string{
						"host",
					},
					PreGroupByMethod: components.PreGroupByMethodSum.ToPointer(),
				},
			},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListMultiMetricMeasurementsResponseBody{
		Metrics: []operations.Metrics{},
		PageInfo: components.CommonPageInfo{
			PrevPage: "<value>",
			NextPage: "<value>",
		},
	}, res.Object)

}

func TestMetrics_UpdateCompositeMetric(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateCompositeMetric")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Metrics.UpdateCompositeMetric(ctx, operations.UpdateCompositeMetricRequest{
		Name: "<value>",
		MetricsUpdateCompositeMetricRequest: components.MetricsUpdateCompositeMetricRequest{
			DisplayName: swov1.String("Disk IO rate"),
			Description: swov1.String("Disk bytes transferred per second"),
			Formula:     "rate(system.disk.io[5m])",
			Units:       swov1.String("bytes/s"),
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.MetricsCompositeMetric)
	assert.Equal(t, &components.MetricsCompositeMetric{
		Name:        "composite.custom.system.disk.io.rate",
		DisplayName: swov1.String("Disk IO rate"),
		Description: swov1.String("Disk bytes transferred per second"),
		Formula:     "rate(system.disk.io[5m])",
		Units:       swov1.String("bytes/s"),
	}, res.MetricsCompositeMetric)

}

func TestMetrics_DeleteCompositeMetric(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteCompositeMetric")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Metrics.DeleteCompositeMetric(ctx, operations.DeleteCompositeMetricRequest{
		Name: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 204, res.HTTPMeta.Response.StatusCode)

}

func TestMetrics_GetMetricByName(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getMetricByName")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Metrics.GetMetricByName(ctx, operations.GetMetricByNameRequest{
		Name: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CommonMetricInfo)
	assert.Equal(t, &components.CommonMetricInfo{
		Name:             "composite.custom.system.disk.io.rate",
		DisplayName:      swov1.String("Disk IO rate"),
		Description:      swov1.String("Disk bytes transferred per second"),
		Units:            swov1.String("bytes/s"),
		Formula:          swov1.String("rate(system.disk.io[5m]"),
		LastReportedTime: types.MustNewTimeFromString("2024-11-25T16:38:24Z"),
	}, res.CommonMetricInfo)

}

func TestMetrics_ListMetricAttributes(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listMetricAttributes")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Metrics.ListMetricAttributes(ctx, operations.ListMetricAttributesRequest{
		Name: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListMetricAttributesResponseBody{
		Names: []string{},
		PageInfo: components.CommonPageInfo{
			PrevPage: "<value>",
			NextPage: "<value>",
		},
	}, res.Object)

}

func TestMetrics_ListMetricAttributeValues(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listMetricAttributeValues")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Metrics.ListMetricAttributeValues(ctx, operations.ListMetricAttributeValuesRequest{
		Name:          "<value>",
		AttributeName: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListMetricAttributeValuesResponseBody{
		Name:   "<value>",
		Values: []string{},
		PageInfo: components.CommonPageInfo{
			PrevPage: "<value>",
			NextPage: "<value>",
		},
	}, res.Object)

}

func TestMetrics_ListMetricMeasurements(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listMetricMeasurements")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Metrics.ListMetricMeasurements(ctx, operations.ListMetricMeasurementsRequest{
		Name:       "<value>",
		SeriesType: components.MetricsMetricSeriesTypeScalar,
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ListMetricMeasurementsResponseBody{
		Groupings: []components.MetricsGrouping{
			components.MetricsGrouping{
				Attributes: []components.CommonKeyValuePair{},
				Measurements: []components.MetricsMeasurement{
					components.MetricsMeasurement{
						Time:  types.MustTimeFromString("2025-07-08T21:51:20.598Z"),
						Value: 7307.56,
					},
					components.MetricsMeasurement{
						Time:  types.MustTimeFromString("2023-05-07T22:33:23.333Z"),
						Value: 250.26,
					},
					components.MetricsMeasurement{
						Time:  types.MustTimeFromString("2023-06-20T08:27:21.001Z"),
						Value: 4929.43,
					},
				},
			},
			components.MetricsGrouping{
				Attributes:   []components.CommonKeyValuePair{},
				Measurements: []components.MetricsMeasurement{},
			},
		},
		BucketSizeInSeconds: 614937,
		PageInfo: components.CommonPageInfo{
			PrevPage: "<value>",
			NextPage: "<value>",
		},
	}, res.Object)

}
