// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"github.com/solarwinds/swo-sdk-go/swov1"
	"github.com/solarwinds/swo-sdk-go/swov1/internal/utils"
	"github.com/solarwinds/swo-sdk-go/swov1/models/components"
	"github.com/solarwinds/swo-sdk-go/swov1/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestCloudaccounts_ActivateAwsIntegration(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("activateAwsIntegration")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.CloudAccounts.ActivateAwsIntegration(ctx, components.CloudAccountsAwsActivateIntegrationRequest{
		ManagementAccountID: "<id>",
		AccountID:           "<id>",
		Enable:              false,
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestCloudaccounts_CreateOrgStructure(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createOrgStructure")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.CloudAccounts.CreateOrgStructure(ctx, components.CloudAccountsAwsOrganisationalUnitRequest{
		MgmtAccountID: "<id>",
		Structure: []components.CloudAccountsAwsOrganisationalUnit{
			components.CloudAccountsAwsOrganisationalUnit{
				ChildID:   "<id>",
				ChildName: "<value>",
			},
			components.CloudAccountsAwsOrganisationalUnit{
				ChildID:   "<id>",
				ChildName: "<value>",
			},
			components.CloudAccountsAwsOrganisationalUnit{
				ChildID:   "<id>",
				ChildName: "<value>",
			},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestCloudaccounts_UpdateAwsIntegration(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateAwsIntegration")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.CloudAccounts.UpdateAwsIntegration(ctx, components.CloudAccountsAwsUpdateIntegrationRequest{
		ManagementAccountID: "<id>",
		AccountID:           "<id>",
		AccountName:         "<value>",
		RoleArn:             "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CloudAccountsAwsUpdateIntegrationResponse)
	assert.Equal(t, &components.CloudAccountsAwsUpdateIntegrationResponse{
		SelectedRegions: []string{
			"<value>",
			"<value>",
			"<value>",
		},
		ExternalID:      "<id>",
		IntegrationID:   "<id>",
		IntegrationType: components.IntegrationTypePolling,
		IsNewAccount:    true,
	}, res.CloudAccountsAwsUpdateIntegrationResponse)

}

func TestCloudaccounts_ValidateMgmtAccountOnboarding(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("validateMgmtAccountOnboarding")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.CloudAccounts.ValidateMgmtAccountOnboarding(ctx, operations.ValidateMgmtAccountOnboardingRequest{
		Request: components.CloudAccountsAwsMgmtAccountOnboardingRequest{
			ManagementAccountID: "<id>",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CloudAccountsAwsMgmtAccountOnboardingResponse)
	assert.Equal(t, &components.CloudAccountsAwsMgmtAccountOnboardingResponse{
		IsOnboarded: false,
	}, res.CloudAccountsAwsMgmtAccountOnboardingResponse)

}
