// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"github.com/solarwinds/swo-sdk-go/swov1"
	"github.com/solarwinds/swo-sdk-go/swov1/internal/utils"
	"github.com/solarwinds/swo-sdk-go/swov1/models/components"
	"github.com/solarwinds/swo-sdk-go/swov1/models/operations"
	"github.com/solarwinds/swo-sdk-go/swov1/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestSDK_ChangeEventsCreate(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("change-events-create")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("CUSTOM_API_URL", "https://api.na-01.st-ssp.solarwinds.com")),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
		swov1.WithClient(testHTTPClient),
	)

	createChangeEventRes, err := s.ChangeEvents.CreateChangeEvent(ctx, components.ChangeEventsChangeEvent{
		Name:        "swo-sdk-e2e-test-event",
		Title:       "SWO SDK E2E Test Deployment",
		Source:      swov1.String("swo-sdk-go-test"),
		Description: swov1.String("End-to-end test deployment event created by SWO SDK"),
		Tags: map[string]string{
			"environment": "test",
			"service":     "swo-sdk",
			"version":     "1.0.0",
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 202, createChangeEventRes.HTTPMeta.Response.StatusCode)

}

func TestSDK_CompositeMetricsCrudLifecycle(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("composite-metrics-crud-lifecycle")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("CUSTOM_API_URL", "https://api.na-01.st-ssp.solarwinds.com")),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
		swov1.WithClient(testHTTPClient),
	)

	createRes, err := s.Metrics.CreateCompositeMetric(ctx, components.MetricsCompositeMetric{
		Name:        "composite.swo.sdk.e2e.create.metric.test",
		DisplayName: swov1.String("SWO SDK E2E Create Metric Test"),
		Description: swov1.String("SWO SDK composite metric end to end create test"),
		Formula:     "rate(system.disk.io[1m])",
		Units:       swov1.String("bytes/s"),
	})
	require.NoError(t, err)
	assert.Equal(t, 201, createRes.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "composite.swo.sdk.e2e.create.metric.test", createRes.MetricsCompositeMetric.Name)
	assert.NotNil(t, createRes.MetricsCompositeMetric.DisplayName)
	assert.Equal(t, swov1.String("SWO SDK E2E Create Metric Test"), createRes.MetricsCompositeMetric.DisplayName)
	assert.NotNil(t, createRes.MetricsCompositeMetric.Description)
	assert.Equal(t, swov1.String("SWO SDK composite metric end to end create test"), createRes.MetricsCompositeMetric.Description)
	assert.Equal(t, "rate(system.disk.io[1m])", createRes.MetricsCompositeMetric.Formula)
	assert.NotNil(t, createRes.MetricsCompositeMetric.Units)
	assert.Equal(t, swov1.String("bytes/s"), createRes.MetricsCompositeMetric.Units)

	getMetricByNameRes, err := s.Metrics.GetMetricByName(ctx, operations.GetMetricByNameRequest{
		Name: createRes.MetricsCompositeMetric.Name,
	})
	require.NoError(t, err)
	assert.Equal(t, 200, getMetricByNameRes.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "composite.swo.sdk.e2e.create.metric.test", getMetricByNameRes.CommonMetricInfo.Name)

	updateRes, err := s.Metrics.UpdateCompositeMetric(ctx, operations.UpdateCompositeMetricRequest{
		Name: createRes.MetricsCompositeMetric.Name,
		MetricsUpdateCompositeMetricRequest: components.MetricsUpdateCompositeMetricRequest{
			DisplayName: swov1.String("SWO SDK E2E Updated Metric Test"),
			Description: swov1.String("SWO SDK composite metric end to end updated test"),
			Formula:     "rate(system.cpu.usage[2m])",
			Units:       swov1.String("bytes/s"),
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, updateRes.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "composite.swo.sdk.e2e.create.metric.test", updateRes.MetricsCompositeMetric.Name)
	assert.NotNil(t, updateRes.MetricsCompositeMetric.DisplayName)
	assert.Equal(t, swov1.String("SWO SDK E2E Updated Metric Test"), updateRes.MetricsCompositeMetric.DisplayName)
	assert.NotNil(t, updateRes.MetricsCompositeMetric.Description)
	assert.Equal(t, swov1.String("SWO SDK composite metric end to end updated test"), updateRes.MetricsCompositeMetric.Description)
	assert.Equal(t, "rate(system.cpu.usage[2m])", updateRes.MetricsCompositeMetric.Formula)
	assert.NotNil(t, updateRes.MetricsCompositeMetric.Units)
	assert.Equal(t, swov1.String("bytes/s"), updateRes.MetricsCompositeMetric.Units)

	getUpdatedMetricRes, err := s.Metrics.GetMetricByName(ctx, operations.GetMetricByNameRequest{
		Name: createRes.MetricsCompositeMetric.Name,
	})
	require.NoError(t, err)
	assert.Equal(t, 200, getUpdatedMetricRes.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "composite.swo.sdk.e2e.create.metric.test", getUpdatedMetricRes.CommonMetricInfo.Name)
	assert.NotNil(t, getUpdatedMetricRes.CommonMetricInfo.DisplayName)
	assert.Equal(t, swov1.String("SWO SDK E2E Updated Metric Test"), getUpdatedMetricRes.CommonMetricInfo.DisplayName)
	assert.NotNil(t, getUpdatedMetricRes.CommonMetricInfo.Description)
	assert.Equal(t, swov1.String("SWO SDK composite metric end to end updated test"), getUpdatedMetricRes.CommonMetricInfo.Description)
	assert.NotNil(t, getUpdatedMetricRes.CommonMetricInfo.Formula)
	assert.Equal(t, swov1.String("rate(system.cpu.usage[2m])"), getUpdatedMetricRes.CommonMetricInfo.Formula)
	assert.NotNil(t, getUpdatedMetricRes.CommonMetricInfo.Units)
	assert.Equal(t, swov1.String("bytes/s"), getUpdatedMetricRes.CommonMetricInfo.Units)

	deleteRes, err := s.Metrics.DeleteCompositeMetric(ctx, operations.DeleteCompositeMetricRequest{
		Name: createRes.MetricsCompositeMetric.Name,
	})
	require.NoError(t, err)
	assert.Equal(t, 204, deleteRes.HTTPMeta.Response.StatusCode)

}

func TestSDK_LogsSearch(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("logs-search")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("CUSTOM_API_URL", "https://api.na-01.st-ssp.solarwinds.com")),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
		swov1.WithClient(testHTTPClient),
	)

	searchLogsRes, err := s.Logs.SearchLogs(ctx, operations.SearchLogsRequest{
		Filter:    swov1.String("level:info"),
		StartTime: types.MustNewTimeFromString("2025-06-15T00:00:00Z"),
		EndTime:   types.MustNewTimeFromString("2025-07-15T23:59:59Z"),
		PageSize:  swov1.Int(10),
	})
	require.NoError(t, err)
	assert.Equal(t, 200, searchLogsRes.HTTPMeta.Response.StatusCode)

	searchLogsWithFilterRes, err := s.Logs.SearchLogs(ctx, operations.SearchLogsRequest{
		Filter:    swov1.String("level:error"),
		StartTime: types.MustNewTimeFromString("2024-01-01T00:00:00Z"),
		EndTime:   types.MustNewTimeFromString("2024-12-31T23:59:59Z"),
		Direction: swov1.String("forward"),
		PageSize:  swov1.Int(5),
	})
	require.NoError(t, err)
	assert.Equal(t, 200, searchLogsWithFilterRes.HTTPMeta.Response.StatusCode)

}

func TestSDK_MetadataEntityTypesList(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("metadata-entity-types-list")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("CUSTOM_API_URL", "https://api.na-01.st-ssp.solarwinds.com")),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
		swov1.WithClient(testHTTPClient),
	)

	listEntityTypesRes, err := s.Metadata.ListEntityTypes(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, listEntityTypesRes.HTTPMeta.Response.StatusCode)
	assert.NotEmpty(t, listEntityTypesRes.Object.Types)

}

func TestSDK_MetadataEntityTypeMetricsList(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("metadata-entity-type-metrics-list")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("CUSTOM_API_URL", "https://api.na-01.st-ssp.solarwinds.com")),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
		swov1.WithClient(testHTTPClient),
	)

	listMetricsForWebsiteTypeRes, err := s.Metadata.ListMetricsForEntityType(ctx, operations.ListMetricsForEntityTypeRequest{
		Type:      "Website",
		StartTime: types.MustNewTimeFromString("2024-01-01T00:00:00Z"),
		EndTime:   types.MustNewTimeFromString("2024-12-31T23:59:59Z"),
	})
	require.NoError(t, err)
	assert.Equal(t, 200, listMetricsForWebsiteTypeRes.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "Website", listMetricsForWebsiteTypeRes.Object.Type)
	assert.NotEmpty(t, listMetricsForWebsiteTypeRes.Object.Metrics)

	listMetricsForURITypeRes, err := s.Metadata.ListMetricsForEntityType(ctx, operations.ListMetricsForEntityTypeRequest{
		Type:      "Uri",
		StartTime: types.MustNewTimeFromString("2024-01-01T00:00:00Z"),
		EndTime:   types.MustNewTimeFromString("2024-12-31T23:59:59Z"),
	})
	require.NoError(t, err)
	assert.Equal(t, 200, listMetricsForURITypeRes.HTTPMeta.Response.StatusCode)
	assert.Equal(t, "Uri", listMetricsForURITypeRes.Object.Type)
	assert.NotEmpty(t, listMetricsForURITypeRes.Object.Metrics)

}
