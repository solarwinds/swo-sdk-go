// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"github.com/solarwinds/swo-sdk-go/swov1"
	"github.com/solarwinds/swo-sdk-go/swov1/internal/utils"
	"github.com/solarwinds/swo-sdk-go/swov1/models/components"
	"github.com/solarwinds/swo-sdk-go/swov1/models/operations"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestDbo_ObserveDatabase(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("observeDatabase")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dbo.ObserveDatabase(ctx, components.DboObserveDatabaseRequest{
		Name:          "<value>",
		AgentID:       "<id>",
		DbType:        components.DboDatabaseTypeMongo,
		AuthMethod:    components.DboDatabaseAuthMethodEntraclientsecret,
		CaptureMethod: nil,
		ConfigOptions: []components.CommonKeyValuePair{
			components.CommonKeyValuePair{
				Key:   "<key>",
				Value: "<value>",
			},
		},
		DbConnOptions: components.DboDatabaseConnectionOptions{
			Host:       "dependent-bar.com",
			Port:       swov1.String("<value>"),
			SslOptions: &components.DboDatabaseSslOptions{},
		},
		Tags: []components.CommonKeyValuePair{},
	})
	require.NoError(t, err)
	assert.Equal(t, 201, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.ObserveDatabaseResponseBody{
		ID: "<id>",
	}, res.Object)

}

func TestDbo_GetPublicKey(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getPublicKey")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dbo.GetPublicKey(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.DboDatabaseCredentialsPublicKeyResponse)
	assert.Equal(t, &components.DboDatabaseCredentialsPublicKeyResponse{
		PublicKey: "<value>",
	}, res.DboDatabaseCredentialsPublicKeyResponse)

}

func TestDbo_UpdateDatabase(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateDatabase")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dbo.UpdateDatabase(ctx, operations.UpdateDatabaseRequest{
		EntityID:                 "<id>",
		DboUpdateDatabaseRequest: components.DboUpdateDatabaseRequest{},
	})
	require.NoError(t, err)
	assert.Equal(t, 204, res.HTTPMeta.Response.StatusCode)

}

func TestDbo_DeleteDatabase(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteDatabase")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dbo.DeleteDatabase(ctx, operations.DeleteDatabaseRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 204, res.HTTPMeta.Response.StatusCode)

}

func TestDbo_GetPluginConfig(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getPluginConfig")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dbo.GetPluginConfig(ctx, operations.GetPluginConfigRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.DboDatabasePluginConfigResponse)
	assert.Equal(t, &components.DboDatabasePluginConfigResponse{
		PluginConfig: []components.DboDatabasePluginConfig{
			components.DboDatabasePluginConfig{
				PluginName: "<value>",
				ConfigOptions: []components.CommonKeyValuePair{
					components.CommonKeyValuePair{
						Key:   "<key>",
						Value: "<value>",
					},
				},
				DbConnOptions: []components.CommonKeyValuePair{
					components.CommonKeyValuePair{
						Key:   "<key>",
						Value: "<value>",
					},
				},
			},
			components.DboDatabasePluginConfig{
				PluginName: "<value>",
				ConfigOptions: []components.CommonKeyValuePair{
					components.CommonKeyValuePair{
						Key:   "<key>",
						Value: "<value>",
					},
				},
				DbConnOptions: []components.CommonKeyValuePair{
					components.CommonKeyValuePair{
						Key:   "<key>",
						Value: "<value>",
					},
				},
			},
			components.DboDatabasePluginConfig{
				PluginName:    "<value>",
				ConfigOptions: []components.CommonKeyValuePair{},
				DbConnOptions: []components.CommonKeyValuePair{
					components.CommonKeyValuePair{
						Key:   "<key>",
						Value: "<value>",
					},
				},
			},
		},
	}, res.DboDatabasePluginConfigResponse)

}

func TestDbo_GetPlugins(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getPlugins")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dbo.GetPlugins(ctx, operations.GetPluginsRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.DboDatabasePluginStatusResponse)
	assert.Equal(t, &components.DboDatabasePluginStatusResponse{
		Plugins: []components.DboDatabasePluginStatus{
			components.DboDatabasePluginStatus{
				PluginName:       "<value>",
				DeploymentStatus: "<value>",
				HealthStatus:     "<value>",
			},
			components.DboDatabasePluginStatus{
				PluginName:       "<value>",
				DeploymentStatus: "<value>",
				HealthStatus:     "<value>",
			},
		},
	}, res.DboDatabasePluginStatusResponse)

}

func TestDbo_PluginOperation(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("pluginOperation")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dbo.PluginOperation(ctx, operations.PluginOperationRequest{
		EntityID:  "<id>",
		Operation: "<value>",
	})
	require.NoError(t, err)
	assert.Equal(t, 204, res.HTTPMeta.Response.StatusCode)

}
