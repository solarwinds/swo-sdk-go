// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"github.com/solarwinds/swo-sdk-go/swov1"
	"github.com/solarwinds/swo-sdk-go/swov1/internal/utils"
	"github.com/solarwinds/swo-sdk-go/swov1/models/components"
	"github.com/solarwinds/swo-sdk-go/swov1/models/operations"
	"github.com/solarwinds/swo-sdk-go/swov1/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestDem_GetDemSettings(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getDemSettings")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.GetDemSettings(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.OutageConfiguration)
	assert.Equal(t, &components.OutageConfiguration{
		FailingTestLocations: components.FailingTestLocationsAll,
		ConsecutiveForDown:   2,
	}, res.OutageConfiguration)

}

func TestDem_SetDemSettings(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("setDemSettings")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.SetDemSettings(ctx, components.OutageConfiguration{
		FailingTestLocations: components.FailingTestLocationsAll,
		ConsecutiveForDown:   2,
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestDem_CreateWebsite(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createWebsite")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.CreateWebsite(ctx, components.Website{
		Name: "solarwinds.com",
		URL:  "https://www.solarwinds.com",
		AvailabilityCheckSettings: &components.AvailabilityCheckSettings{
			CheckForString: &components.CheckForString{
				Operator: components.CheckForStringOperatorContains,
				Value:    "string",
			},
			TestIntervalInSeconds: 14400,
			Protocols: []components.WebsiteProtocol{
				components.WebsiteProtocolHTTP,
				components.WebsiteProtocolHTTPS,
			},
			PlatformOptions: &components.ProbePlatformOptions{
				ProbePlatforms: []components.ProbePlatform{
					components.ProbePlatformAws,
				},
				TestFromAll: swov1.Bool(true),
			},
			TestFrom: components.TestFrom{
				Type: components.ProbeLocationTypeRegion,
				Values: []string{
					"NA",
				},
			},
			Ssl: &components.Ssl{
				Enabled:                        swov1.Bool(true),
				DaysPriorToExpiration:          swov1.Int(7),
				IgnoreIntermediateCertificates: swov1.Bool(true),
			},
			CustomHeaders: []components.CustomHeaders{
				components.CustomHeaders{
					Name:  "string",
					Value: "string",
				},
			},
			AllowInsecureRenegotiation: swov1.Bool(true),
			PostData:                   swov1.String("{\"example\": \"value\"}"),
			OutageConfiguration: &components.WebsiteOutageConfiguration{
				FailingTestLocations: components.WebsiteFailingTestLocationsAll,
				ConsecutiveForDown:   2,
			},
		},
		Tags: []components.Tag{
			components.Tag{
				Key:   "environment",
				Value: "production",
			},
		},
		Rum: &components.Rum{
			ApdexTimeInSeconds: swov1.Int(4),
			Spa:                true,
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 201, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.EntityID)
	assert.Equal(t, &components.EntityID{
		ID: "e-1448474379026206720",
	}, res.EntityID)

}

func TestDem_GetWebsite(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getWebsite")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.GetWebsite(ctx, operations.GetWebsiteRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.Object)
	assert.Equal(t, &operations.GetWebsiteResponseBody{
		ID:     "e-1448474379026206720",
		Type:   "Website",
		Status: operations.StatusUp,
		Name:   "solarwinds.com",
		URL:    "https://www.solarwinds.com",
		AvailabilityCheckSettings: &operations.AvailabilityCheckSettings{
			CheckForString: &operations.CheckForString{
				Operator: components.CheckForStringOperatorContains,
				Value:    "string",
			},
			TestIntervalInSeconds: 14400,
			Protocols: []components.WebsiteProtocol{
				components.WebsiteProtocolHTTP,
				components.WebsiteProtocolHTTPS,
			},
			PlatformOptions: &components.ProbePlatformOptions{
				ProbePlatforms: []components.ProbePlatform{
					components.ProbePlatformAws,
				},
				TestFromAll: swov1.Bool(true),
			},
			TestFrom: components.TestFrom{
				Type: components.ProbeLocationTypeRegion,
				Values: []string{
					"NA",
				},
			},
			Ssl: &operations.Ssl{
				Enabled:                        swov1.Bool(true),
				DaysPriorToExpiration:          swov1.Int(7),
				IgnoreIntermediateCertificates: swov1.Bool(true),
			},
			CustomHeaders: []components.CustomHeaders{
				components.CustomHeaders{
					Name:  "string",
					Value: "string",
				},
			},
			AllowInsecureRenegotiation: swov1.Bool(true),
			PostData:                   swov1.String("{\"example\": \"value\"}"),
			OutageConfiguration: &operations.OutageConfiguration{
				FailingTestLocations: operations.FailingTestLocationsAll,
				ConsecutiveForDown:   2,
			},
		},
		Tags: []components.Tag{
			components.Tag{
				Key:   "environment",
				Value: "production",
			},
		},
		Rum: &operations.Rum{
			ApdexTimeInSeconds: swov1.Int(4),
			Snippet:            swov1.String("string"),
			Spa:                true,
		},
		LastOutageStartTime:          types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastOutageEndTime:            types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastTestTime:                 types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastErrorTime:                types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastResponseTime:             swov1.Int(376),
		NextOnDemandAvailabilityTime: swov1.Int(0),
	}, res.Object)

}

func TestDem_UpdateWebsite(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateWebsite")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.UpdateWebsite(ctx, operations.UpdateWebsiteRequest{
		EntityID: "<id>",
		Website: components.Website{
			Name: "solarwinds.com",
			URL:  "https://www.solarwinds.com",
			AvailabilityCheckSettings: &components.AvailabilityCheckSettings{
				CheckForString: &components.CheckForString{
					Operator: components.CheckForStringOperatorContains,
					Value:    "string",
				},
				TestIntervalInSeconds: 14400,
				Protocols: []components.WebsiteProtocol{
					components.WebsiteProtocolHTTP,
					components.WebsiteProtocolHTTPS,
				},
				PlatformOptions: &components.ProbePlatformOptions{
					ProbePlatforms: []components.ProbePlatform{
						components.ProbePlatformAws,
					},
					TestFromAll: swov1.Bool(true),
				},
				TestFrom: components.TestFrom{
					Type: components.ProbeLocationTypeRegion,
					Values: []string{
						"NA",
					},
				},
				Ssl: &components.Ssl{
					Enabled:                        swov1.Bool(true),
					DaysPriorToExpiration:          swov1.Int(7),
					IgnoreIntermediateCertificates: swov1.Bool(true),
				},
				CustomHeaders: []components.CustomHeaders{
					components.CustomHeaders{
						Name:  "string",
						Value: "string",
					},
				},
				AllowInsecureRenegotiation: swov1.Bool(true),
				PostData:                   swov1.String("{\"example\": \"value\"}"),
				OutageConfiguration: &components.WebsiteOutageConfiguration{
					FailingTestLocations: components.WebsiteFailingTestLocationsAll,
					ConsecutiveForDown:   2,
				},
			},
			Tags: []components.Tag{
				components.Tag{
					Key:   "environment",
					Value: "production",
				},
			},
			Rum: &components.Rum{
				ApdexTimeInSeconds: swov1.Int(4),
				Spa:                true,
			},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.EntityID)
	assert.Equal(t, &components.EntityID{
		ID: "e-1448474379026206720",
	}, res.EntityID)

}

func TestDem_DeleteWebsite(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteWebsite")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.DeleteWebsite(ctx, operations.DeleteWebsiteRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.EntityID)
	assert.Equal(t, &components.EntityID{
		ID: "e-1448474379026206720",
	}, res.EntityID)

}

func TestDem_PauseWebsiteMonitoring(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("pauseWebsiteMonitoring")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.PauseWebsiteMonitoring(ctx, operations.PauseWebsiteMonitoringRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.EntityID)
	assert.Equal(t, &components.EntityID{
		ID: "e-1448474379026206720",
	}, res.EntityID)

}

func TestDem_UnpauseWebsiteMonitoring(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("unpauseWebsiteMonitoring")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.UnpauseWebsiteMonitoring(ctx, operations.UnpauseWebsiteMonitoringRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.EntityID)
	assert.Equal(t, &components.EntityID{
		ID: "e-1448474379026206720",
	}, res.EntityID)

}
