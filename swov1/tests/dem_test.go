// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"github.com/solarwinds/swo-sdk-go/swov1"
	"github.com/solarwinds/swo-sdk-go/swov1/internal/utils"
	"github.com/solarwinds/swo-sdk-go/swov1/models/components"
	"github.com/solarwinds/swo-sdk-go/swov1/models/operations"
	"github.com/solarwinds/swo-sdk-go/swov1/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestDem_GetDemSettings(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getDemSettings")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.GetDemSettings(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.DemOutageConfiguration)
	assert.Equal(t, &components.DemOutageConfiguration{
		FailingTestLocations: components.FailingTestLocationsAll,
		ConsecutiveForDown:   2,
	}, res.DemOutageConfiguration)

}

func TestDem_SetDemSettings(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("setDemSettings")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.SetDemSettings(ctx, components.DemOutageConfiguration{
		FailingTestLocations: components.FailingTestLocationsAll,
		ConsecutiveForDown:   2,
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)

}

func TestDem_CreateWebsite(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createWebsite")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.CreateWebsite(ctx, components.DemWebsite{
		Name: "solarwinds.com",
		URL:  "https://www.solarwinds.com",
		AvailabilityCheckSettings: &components.AvailabilityCheckSettings{
			PlatformOptions: &components.DemWebsitePlatformOptions{
				ProbePlatforms: []components.DemProbePlatform{
					components.DemProbePlatformAws,
				},
				TestFromAll: swov1.Bool(true),
			},
			TestFrom: components.DemTestFrom{
				Type: components.TypeRegion,
				Values: []string{
					"NA",
				},
			},
			TestIntervalInSeconds: 14400,
			OutageConfiguration: &components.DemWebsiteOutageConfiguration{
				FailingTestLocations: components.DemWebsiteFailingTestLocationsAll,
				ConsecutiveForDown:   2,
			},
			CheckForString: &components.CheckForString{
				Operator: components.OperatorContains,
				Value:    "string",
			},
			Protocols: []components.DemWebsiteProtocol{
				components.DemWebsiteProtocolHTTP,
				components.DemWebsiteProtocolHTTPS,
			},
			Ssl: &components.Ssl{
				Enabled:                        swov1.Bool(true),
				DaysPriorToExpiration:          swov1.Int(7),
				IgnoreIntermediateCertificates: swov1.Bool(true),
			},
			CustomHeaders: []components.DemCustomHeaders{
				components.DemCustomHeaders{
					Name:  "string",
					Value: "string",
				},
			},
			AllowInsecureRenegotiation: swov1.Bool(true),
			PostData:                   swov1.String("{\"example\": \"value\"}"),
		},
		Tags: []components.CommonTag{
			components.CommonTag{
				Key:   "environment",
				Value: "production",
			},
		},
		Rum: &components.Rum{
			ApdexTimeInSeconds: swov1.Int(4),
			Spa:                true,
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 201, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CommonEntityID)
	assert.Equal(t, &components.CommonEntityID{
		ID: "e-1448474379026206720",
	}, res.CommonEntityID)

}

func TestDem_GetWebsite(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getWebsite")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.GetWebsite(ctx, operations.GetWebsiteRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.DemGetWebsiteResponse)
	assert.Equal(t, &components.DemGetWebsiteResponse{
		ID:     "e-1448474379026206720",
		Type:   "Website",
		Status: components.DemGetWebsiteResponseStatusUp,
		Name:   "solarwinds.com",
		URL:    "https://www.solarwinds.com",
		MonitoringOptions: components.MonitoringOptions{
			IsAvailabilityActive: true,
			IsRumActive:          false,
		},
		AvailabilityCheckSettings: &components.DemGetWebsiteResponseAvailabilityCheckSettings{
			PlatformOptions: &components.DemGetWebsiteResponsePlatformOptions{
				ProbePlatforms: []components.DemProbePlatform{
					components.DemProbePlatformAws,
				},
				TestFromAll: swov1.Bool(true),
			},
			TestFrom: components.DemTestFrom{
				Type: components.TypeRegion,
				Values: []string{
					"NA",
				},
			},
			TestIntervalInSeconds: 14400,
			OutageConfiguration: &components.DemGetWebsiteResponseOutageConfiguration{
				FailingTestLocations: components.DemGetWebsiteResponseFailingTestLocationsAll,
				ConsecutiveForDown:   2,
			},
			CheckForString: &components.DemGetWebsiteResponseCheckForString{
				Operator: components.DemGetWebsiteResponseOperatorContains,
				Value:    "string",
			},
			Protocols: []components.DemWebsiteProtocol{
				components.DemWebsiteProtocolHTTP,
				components.DemWebsiteProtocolHTTPS,
			},
			Ssl: &components.DemGetWebsiteResponseSsl{
				Enabled:                        swov1.Bool(true),
				DaysPriorToExpiration:          swov1.Int(7),
				IgnoreIntermediateCertificates: swov1.Bool(true),
			},
			CustomHeaders: []components.DemCustomHeaders{
				components.DemCustomHeaders{
					Name:  "string",
					Value: "string",
				},
			},
			AllowInsecureRenegotiation: swov1.Bool(true),
			PostData:                   swov1.String("{\"example\": \"value\"}"),
		},
		Tags: []components.CommonTag{
			components.CommonTag{
				Key:   "environment",
				Value: "production",
			},
		},
		Rum: &components.DemGetWebsiteResponseRum{
			ApdexTimeInSeconds: swov1.Int(4),
			Snippet:            swov1.String("string"),
			Spa:                true,
		},
		LastOutageStartTime:          types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastOutageEndTime:            types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastTestTime:                 types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastErrorTime:                types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastResponseTime:             swov1.Int(376),
		NextOnDemandAvailabilityTime: swov1.Int(0),
	}, res.DemGetWebsiteResponse)

}

func TestDem_UpdateWebsite(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateWebsite")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.UpdateWebsite(ctx, operations.UpdateWebsiteRequest{
		EntityID: "<id>",
		DemWebsite: components.DemWebsite{
			Name: "solarwinds.com",
			URL:  "https://www.solarwinds.com",
			AvailabilityCheckSettings: &components.AvailabilityCheckSettings{
				PlatformOptions: &components.DemWebsitePlatformOptions{
					ProbePlatforms: []components.DemProbePlatform{
						components.DemProbePlatformAws,
					},
					TestFromAll: swov1.Bool(true),
				},
				TestFrom: components.DemTestFrom{
					Type: components.TypeRegion,
					Values: []string{
						"NA",
					},
				},
				TestIntervalInSeconds: 14400,
				OutageConfiguration: &components.DemWebsiteOutageConfiguration{
					FailingTestLocations: components.DemWebsiteFailingTestLocationsAll,
					ConsecutiveForDown:   2,
				},
				CheckForString: &components.CheckForString{
					Operator: components.OperatorContains,
					Value:    "string",
				},
				Protocols: []components.DemWebsiteProtocol{
					components.DemWebsiteProtocolHTTP,
					components.DemWebsiteProtocolHTTPS,
				},
				Ssl: &components.Ssl{
					Enabled:                        swov1.Bool(true),
					DaysPriorToExpiration:          swov1.Int(7),
					IgnoreIntermediateCertificates: swov1.Bool(true),
				},
				CustomHeaders: []components.DemCustomHeaders{
					components.DemCustomHeaders{
						Name:  "string",
						Value: "string",
					},
				},
				AllowInsecureRenegotiation: swov1.Bool(true),
				PostData:                   swov1.String("{\"example\": \"value\"}"),
			},
			Tags: []components.CommonTag{
				components.CommonTag{
					Key:   "environment",
					Value: "production",
				},
			},
			Rum: &components.Rum{
				ApdexTimeInSeconds: swov1.Int(4),
				Spa:                true,
			},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CommonEntityID)
	assert.Equal(t, &components.CommonEntityID{
		ID: "e-1448474379026206720",
	}, res.CommonEntityID)

}

func TestDem_DeleteWebsite(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteWebsite")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.DeleteWebsite(ctx, operations.DeleteWebsiteRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CommonEntityID)
	assert.Equal(t, &components.CommonEntityID{
		ID: "e-1448474379026206720",
	}, res.CommonEntityID)

}

func TestDem_PauseWebsiteMonitoring(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("pauseWebsiteMonitoring")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.PauseWebsiteMonitoring(ctx, operations.PauseWebsiteMonitoringRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CommonEntityID)
	assert.Equal(t, &components.CommonEntityID{
		ID: "e-1448474379026206720",
	}, res.CommonEntityID)

}

func TestDem_UnpauseWebsiteMonitoring(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("unpauseWebsiteMonitoring")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.UnpauseWebsiteMonitoring(ctx, operations.UnpauseWebsiteMonitoringRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CommonEntityID)
	assert.Equal(t, &components.CommonEntityID{
		ID: "e-1448474379026206720",
	}, res.CommonEntityID)

}

func TestDem_ListProbes(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("listProbes")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.ListProbes(ctx)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.DemListProbesResponse)
	assert.Equal(t, &components.DemListProbesResponse{
		Probes: []components.DemProbe{
			components.DemProbe{
				ID:       "probe-1",
				Name:     "Washington",
				Active:   true,
				Platform: components.PlatformAws,
				Region:   "NA",
				Country:  "US",
				City:     "Washington D.C.",
				Coordinates: components.Coordinates{
					Latitude:  38.89511,
					Longitude: -77.03637,
				},
				Ipv4Addresses: []string{
					"34.232.5.40",
					"44.207.30.12",
				},
				Ipv6Addresses: []string{
					"2001:0db8:85a3:0000:0000:8a2e:0370:7334",
				},
			},
		},
	}, res.DemListProbesResponse)

}

func TestDem_CreateURI(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createUri")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.CreateURI(ctx, components.DemURI{
		Name:       "example-uri",
		IPOrDomain: "solarwinds.com",
		AvailabilityCheckSettings: components.DemURIAvailabilityCheckSettingsInput{
			PlatformOptions: &components.PlatformOptions{
				ProbePlatforms: []components.DemProbePlatform{
					components.DemProbePlatformAws,
				},
				TestFromAll: swov1.Bool(true),
			},
			TestFrom: components.DemTestFrom{
				Type: components.TypeRegion,
				Values: []string{
					"NA",
				},
			},
			TestIntervalInSeconds: 300,
			OutageConfiguration: &components.OutageConfiguration{
				FailingTestLocations: components.DemURIAvailabilityCheckSettingsInputFailingTestLocationsAll,
				ConsecutiveForDown:   2,
			},
			TCP: &components.TCP{
				Enabled: true,
				Port:    443,
			},
		},
		Tags: []components.CommonTag{
			components.CommonTag{
				Key:   "environment",
				Value: "production",
			},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 201, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CommonEntityID)
	assert.Equal(t, &components.CommonEntityID{
		ID: "e-1448474379026206720",
	}, res.CommonEntityID)

}

func TestDem_GetURI(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getUri")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.GetURI(ctx, operations.GetURIRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.DemGetURIResponse)
	assert.Equal(t, &components.DemGetURIResponse{
		ID:         "e-1448474379026206720",
		Type:       "Uri",
		Status:     components.StatusUp,
		Name:       "solarwinds.com",
		IPOrDomain: "solarwinds.com",
		AvailabilityCheckSettings: components.DemURIAvailabilityCheckSettings{
			PlatformOptions: &components.DemURIAvailabilityCheckSettingsPlatformOptions{
				ProbePlatforms: []components.DemProbePlatform{
					components.DemProbePlatformAws,
				},
				TestFromAll: swov1.Bool(true),
			},
			TestFrom: components.DemTestFrom{
				Type: components.TypeRegion,
				Values: []string{
					"NA",
				},
			},
			TestIntervalInSeconds: 14400,
			OutageConfiguration: &components.DemURIAvailabilityCheckSettingsOutageConfiguration{
				FailingTestLocations: components.DemURIAvailabilityCheckSettingsFailingTestLocationsAll,
				ConsecutiveForDown:   2,
			},
			Ping: &components.DemURIAvailabilityCheckSettingsPing{
				Enabled: true,
			},
			Protocol: components.ProtocolPing,
		},
		Tags: []components.CommonTag{
			components.CommonTag{
				Key:   "environment",
				Value: "production",
			},
		},
		LastOutageStartTime: types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastOutageEndTime:   types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastTestTime:        types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastErrorTime:       types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastResponseTime:    swov1.Int(376),
	}, res.DemGetURIResponse)

}

func TestDem_UpdateURI(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateUri")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.UpdateURI(ctx, operations.UpdateURIRequest{
		EntityID: "<id>",
		DemURI: components.DemURI{
			Name:       "example-uri",
			IPOrDomain: "solarwinds.com",
			AvailabilityCheckSettings: components.DemURIAvailabilityCheckSettingsInput{
				PlatformOptions: &components.PlatformOptions{
					ProbePlatforms: []components.DemProbePlatform{
						components.DemProbePlatformAws,
					},
					TestFromAll: swov1.Bool(true),
				},
				TestFrom: components.DemTestFrom{
					Type: components.TypeRegion,
					Values: []string{
						"NA",
					},
				},
				TestIntervalInSeconds: 300,
				OutageConfiguration: &components.OutageConfiguration{
					FailingTestLocations: components.DemURIAvailabilityCheckSettingsInputFailingTestLocationsAll,
					ConsecutiveForDown:   2,
				},
				TCP: &components.TCP{
					Enabled: true,
					Port:    443,
				},
			},
			Tags: []components.CommonTag{
				components.CommonTag{
					Key:   "environment",
					Value: "production",
				},
			},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CommonEntityID)
	assert.Equal(t, &components.CommonEntityID{
		ID: "e-1448474379026206720",
	}, res.CommonEntityID)

}

func TestDem_DeleteURI(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteUri")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.DeleteURI(ctx, operations.DeleteURIRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CommonEntityID)
	assert.Equal(t, &components.CommonEntityID{
		ID: "e-1448474379026206720",
	}, res.CommonEntityID)

}

func TestDem_PauseURIMonitoring(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("pauseUriMonitoring")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.PauseURIMonitoring(ctx, operations.PauseURIMonitoringRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CommonEntityID)
	assert.Equal(t, &components.CommonEntityID{
		ID: "e-1448474379026206720",
	}, res.CommonEntityID)

}

func TestDem_UnpauseURIMonitoring(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("unpauseUriMonitoring")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("TEST_SERVER_URL", "http://localhost:18080")),
		swov1.WithClient(testHTTPClient),
		swov1.WithSecurity(utils.GetEnv("SWO_API_TOKEN", "value")),
	)

	res, err := s.Dem.UnpauseURIMonitoring(ctx, operations.UnpauseURIMonitoringRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CommonEntityID)
	assert.Equal(t, &components.CommonEntityID{
		ID: "e-1448474379026206720",
	}, res.CommonEntityID)

}
