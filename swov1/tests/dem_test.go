// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	"github.com/solarwinds/swo-sdk-go/swov1"
	"github.com/solarwinds/swo-sdk-go/swov1/internal/utils"
	"github.com/solarwinds/swo-sdk-go/swov1/models/components"
	"github.com/solarwinds/swo-sdk-go/swov1/models/operations"
	"github.com/solarwinds/swo-sdk-go/swov1/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestDem_CreateTransaction(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("createTransaction")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("PUBLIC_SWO_API_STAGE_URL", "")),
		swov1.WithSecurity(utils.GetEnv("SWO_STAGE_API_TOKEN", "value")),
		swov1.WithClient(testHTTPClient),
	)

	res, err := s.Dem.CreateTransaction(ctx, components.DemTransaction{
		Name:        "Solarwinds",
		Description: swov1.Pointer("Opens Solarwinds homepage"),
		TestDefinition: components.DemTransactionTestDefinition{
			TestFrom: components.DemTestFrom{
				Type: components.TypeRegion,
				Values: []string{
					"NA",
				},
			},
			PlatformOptions: &components.PlatformOptions{
				ProbePlatforms: []components.DemProbePlatform{
					components.DemProbePlatformAws,
				},
				TestFromAll: swov1.Pointer(true),
			},
			OutageConfiguration: &components.OutageConfiguration{
				FailingTestLocations: components.DemTransactionTestDefinitionFailingTestLocationsAll,
				ConsecutiveForDown:   2,
			},
			TestIntervalInSeconds: 14400,
			WindowSize: components.DemWindowSize{
				Width:  28965,
				Height: 156492,
			},
			Commands: []components.DemTransactionCommand{
				components.DemTransactionCommand{
					Command: components.DemTransactionCommandNameOpen,
					Target:  swov1.Pointer("https://example.com"),
				},
			},
		},
		Tags: []components.CommonTag{
			components.CommonTag{
				Key:   "environment",
				Value: "production",
			},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 201, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CommonEntityID)
	assert.Equal(t, &components.CommonEntityID{
		ID: "e-1448474379026206720",
	}, res.CommonEntityID)

}

func TestDem_GetTransaction(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("getTransaction")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("PUBLIC_SWO_API_STAGE_URL", "")),
		swov1.WithSecurity(utils.GetEnv("SWO_STAGE_API_TOKEN", "value")),
		swov1.WithClient(testHTTPClient),
	)

	res, err := s.Dem.GetTransaction(ctx, operations.GetTransactionRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.DemGetTransactionResponse)
	assert.Equal(t, &components.DemGetTransactionResponse{
		ID:     "e-1448474379026206720",
		Type:   "SyntheticTransaction",
		Status: components.StatusUp,
		Name:   "<value>",
		TestDefinition: components.DemTransactionTestDefinition{
			TestFrom: components.DemTestFrom{
				Type: components.TypeRegion,
				Values: []string{
					"NA",
				},
			},
			PlatformOptions: &components.PlatformOptions{
				ProbePlatforms: []components.DemProbePlatform{
					components.DemProbePlatformAws,
				},
				TestFromAll: swov1.Pointer(true),
			},
			OutageConfiguration: &components.OutageConfiguration{
				FailingTestLocations: components.DemTransactionTestDefinitionFailingTestLocationsAll,
				ConsecutiveForDown:   2,
			},
			TestIntervalInSeconds: 14400,
			WindowSize: components.DemWindowSize{
				Width:  806070,
				Height: 380201,
			},
			Commands: []components.DemTransactionCommand{
				components.DemTransactionCommand{
					Command: components.DemTransactionCommandNameOpen,
					Target:  swov1.Pointer("https://example.com"),
				},
			},
		},
		Tags: []components.CommonTag{
			components.CommonTag{
				Key:   "environment",
				Value: "production",
			},
		},
		LastOutageStartTime: types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastOutageEndTime:   types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastTestTime:        types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
		LastErrorTime:       types.MustNewTimeFromString("2025-01-15T14:31:19.735Z"),
	}, res.DemGetTransactionResponse)

}

func TestDem_UpdateTransaction(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("updateTransaction")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("PUBLIC_SWO_API_STAGE_URL", "")),
		swov1.WithSecurity(utils.GetEnv("SWO_STAGE_API_TOKEN", "value")),
		swov1.WithClient(testHTTPClient),
	)

	res, err := s.Dem.UpdateTransaction(ctx, operations.UpdateTransactionRequest{
		EntityID: "<id>",
		DemTransaction: components.DemTransaction{
			Name:        "Solarwinds",
			Description: swov1.Pointer("Opens Solarwinds homepage"),
			TestDefinition: components.DemTransactionTestDefinition{
				TestFrom: components.DemTestFrom{
					Type: components.TypeRegion,
					Values: []string{
						"NA",
					},
				},
				PlatformOptions: &components.PlatformOptions{
					ProbePlatforms: []components.DemProbePlatform{
						components.DemProbePlatformAws,
					},
					TestFromAll: swov1.Pointer(true),
				},
				OutageConfiguration:   nil,
				TestIntervalInSeconds: 14400,
				WindowSize: components.DemWindowSize{
					Width:  750299,
					Height: 72607,
				},
				Commands: []components.DemTransactionCommand{
					components.DemTransactionCommand{
						Command: components.DemTransactionCommandNameOpen,
						Target:  swov1.Pointer("https://example.com"),
					},
				},
			},
			Tags: []components.CommonTag{
				components.CommonTag{
					Key:   "environment",
					Value: "production",
				},
			},
		},
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CommonEntityID)
	assert.Equal(t, &components.CommonEntityID{
		ID: "e-1448474379026206720",
	}, res.CommonEntityID)

}

func TestDem_DeleteTransaction(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("deleteTransaction")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("PUBLIC_SWO_API_STAGE_URL", "")),
		swov1.WithSecurity(utils.GetEnv("SWO_STAGE_API_TOKEN", "value")),
		swov1.WithClient(testHTTPClient),
	)

	res, err := s.Dem.DeleteTransaction(ctx, operations.DeleteTransactionRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CommonEntityID)
	assert.Equal(t, &components.CommonEntityID{
		ID: "e-1448474379026206720",
	}, res.CommonEntityID)

}

func TestDem_PauseTransactionMonitoring(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("pauseTransactionMonitoring")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("PUBLIC_SWO_API_STAGE_URL", "")),
		swov1.WithSecurity(utils.GetEnv("SWO_STAGE_API_TOKEN", "value")),
		swov1.WithClient(testHTTPClient),
	)

	res, err := s.Dem.PauseTransactionMonitoring(ctx, operations.PauseTransactionMonitoringRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CommonEntityID)
	assert.Equal(t, &components.CommonEntityID{
		ID: "e-1448474379026206720",
	}, res.CommonEntityID)

}

func TestDem_UnpauseTransactionMonitoring(t *testing.T) {
	ctx := context.Background()

	testHTTPClient := createTestHTTPClient("unpauseTransactionMonitoring")

	s := swov1.New(
		swov1.WithServerURL(utils.GetEnv("PUBLIC_SWO_API_STAGE_URL", "")),
		swov1.WithSecurity(utils.GetEnv("SWO_STAGE_API_TOKEN", "value")),
		swov1.WithClient(testHTTPClient),
	)

	res, err := s.Dem.UnpauseTransactionMonitoring(ctx, operations.UnpauseTransactionMonitoringRequest{
		EntityID: "<id>",
	})
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.NotNil(t, res.CommonEntityID)
	assert.Equal(t, &components.CommonEntityID{
		ID: "e-1448474379026206720",
	}, res.CommonEntityID)

}
